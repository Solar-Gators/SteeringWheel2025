
SteeringWheel2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003964  08003964  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800396c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08003978  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003978  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8fe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b9  00000000  00000000  0000f93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  000110f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ee  00000000  00000000  00011a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027400  00000000  00000000  000120ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7ec  00000000  00000000  000394ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24af  00000000  00000000  00043cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000242c  00000000  00000000  001361cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001385f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080038fc 	.word	0x080038fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080038fc 	.word	0x080038fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  for(int i = 0; i<8; i++){
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e007      	b.n	8000534 <main+0x1c>
	  lastButtonPressTime[i] = 0;
 8000524:	4a28      	ldr	r2, [pc, #160]	@ (80005c8 <main+0xb0>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2100      	movs	r1, #0
 800052a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i<8; i++){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b07      	cmp	r3, #7
 8000538:	ddf4      	ble.n	8000524 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fcfc 	bl	8000f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f84d 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f8f1 	bl	8000728 <MX_GPIO_Init>
  MX_UART4_Init();
 8000546:	f000 f88f 	bl	8000668 <MX_UART4_Init>
  MX_UART5_Init();
 800054a:	f000 f8bd 	bl	80006c8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  buttonStates = 0b01000000;
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <main+0xb4>)
 8000550:	2240      	movs	r2, #64	@ 0x40
 8000552:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(BUTTON7_LED_GPIO_Port, BUTTON7_LED_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2110      	movs	r1, #16
 8000558:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <main+0xb8>)
 800055a:	f001 f841 	bl	80015e0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 800055e:	2110      	movs	r1, #16
 8000560:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <main+0xbc>)
 8000562:	f001 f855 	bl	8001610 <HAL_GPIO_TogglePin>

	if(!HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin)){
 8000566:	2120      	movs	r1, #32
 8000568:	4819      	ldr	r0, [pc, #100]	@ (80005d0 <main+0xb8>)
 800056a:	f001 f821 	bl	80015b0 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d107      	bne.n	8000584 <main+0x6c>
		buttonStates |= 0b00100000;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <main+0xb4>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <main+0xb4>)
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e006      	b.n	8000592 <main+0x7a>
	}else{
		buttonStates &= 0b11011111;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <main+0xb4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f023 0320 	bic.w	r3, r3, #32
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <main+0xb4>)
 8000590:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Transmit(&huart4, &buttonStates, 1, 1000) != HAL_OK){
 8000592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000596:	2201      	movs	r2, #1
 8000598:	490c      	ldr	r1, [pc, #48]	@ (80005cc <main+0xb4>)
 800059a:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <main+0xc0>)
 800059c:	f002 fc24 	bl	8002de8 <HAL_UART_Transmit>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d005      	beq.n	80005b2 <main+0x9a>
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2120      	movs	r1, #32
 80005aa:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <main+0xbc>)
 80005ac:	f001 f818 	bl	80015e0 <HAL_GPIO_WritePin>
 80005b0:	e004      	b.n	80005bc <main+0xa4>
	}
	else{
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0xbc>)
 80005b8:	f001 f812 	bl	80015e0 <HAL_GPIO_WritePin>
	}

	HAL_Delay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c0:	f000 fd2e 	bl	8001020 <HAL_Delay>
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 80005c4:	e7cb      	b.n	800055e <main+0x46>
 80005c6:	bf00      	nop
 80005c8:	20000138 	.word	0x20000138
 80005cc:	20000158 	.word	0x20000158
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400
 80005d8:	20000028 	.word	0x20000028

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f959 	bl	80038a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f001 f845 	bl	8001690 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 fb14 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000610:	2310      	movs	r3, #16
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	@ 0x60
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f887 	bl	800173c <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000634:	f000 fb00 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fc8d 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800065c:	f000 faec 	bl	8000c38 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	@ 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_UART4_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <MX_UART4_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_UART4_Init+0x58>)
 8000674:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000678:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_UART4_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_UART4_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_UART4_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_UART4_Init+0x58>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_UART4_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_UART4_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_UART4_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_UART4_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_UART4_Init+0x58>)
 80006ac:	f002 fb4e 	bl	8002d4c <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 fabf 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40004c00 	.word	0x40004c00

080006c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_UART5_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <MX_UART5_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_UART5_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_UART5_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_UART5_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_UART5_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_UART5_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_UART5_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_UART5_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_UART5_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_UART5_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_UART5_Init+0x58>)
 800070c:	f002 fb1e 	bl	8002d4c <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 fa8f 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b0 	.word	0x200000b0
 8000724:	40005000 	.word	0x40005000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b60      	ldr	r3, [pc, #384]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a5f      	ldr	r2, [pc, #380]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b5d      	ldr	r3, [pc, #372]	@ (80008c0 <MX_GPIO_Init+0x198>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b5a      	ldr	r3, [pc, #360]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a59      	ldr	r2, [pc, #356]	@ (80008c0 <MX_GPIO_Init+0x198>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b57      	ldr	r3, [pc, #348]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b54      	ldr	r3, [pc, #336]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a53      	ldr	r2, [pc, #332]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b51      	ldr	r3, [pc, #324]	@ (80008c0 <MX_GPIO_Init+0x198>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b4e      	ldr	r3, [pc, #312]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a4d      	ldr	r2, [pc, #308]	@ (80008c0 <MX_GPIO_Init+0x198>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b4b      	ldr	r3, [pc, #300]	@ (80008c0 <MX_GPIO_Init+0x198>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f000 ff1b 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 7124 	mov.w	r1, #656	@ 0x290
 80007b0:	4844      	ldr	r0, [pc, #272]	@ (80008c4 <MX_GPIO_Init+0x19c>)
 80007b2:	f000 ff15 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 80007b6:	2200      	movs	r2, #0
 80007b8:	f24a 0135 	movw	r1, #41013	@ 0xa035
 80007bc:	4842      	ldr	r0, [pc, #264]	@ (80008c8 <MX_GPIO_Init+0x1a0>)
 80007be:	f000 ff0f 	bl	80015e0 <HAL_GPIO_WritePin>
                          |OK_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON8_Pin BUTTON7_Pin */
  GPIO_InitStruct.Pin = BUTTON8_Pin|BUTTON7_Pin;
 80007c2:	23a0      	movs	r3, #160	@ 0xa0
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f000 fd57 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON8_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON8_LED_Pin;
 80007de:	2340      	movs	r3, #64	@ 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON8_LED_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f8:	f000 fd48 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON7_LED_Pin BUTTON3_LED_Pin BUTTON4_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin;
 80007fc:	f44f 7324 	mov.w	r3, #656	@ 0x290
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	482b      	ldr	r0, [pc, #172]	@ (80008c4 <MX_GPIO_Init+0x19c>)
 8000816:	f000 fd39 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON6_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON6_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4825      	ldr	r0, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0x19c>)
 800082e:	f000 fd2d 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON6_LED_Pin BUTTON5_LED_Pin BUTTON1_LED_Pin BUTTON2_LED_Pin
                           OK_LED_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 8000832:	f24a 0335 	movw	r3, #41013	@ 0xa035
 8000836:	617b      	str	r3, [r7, #20]
                          |OK_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0x1a0>)
 800084c:	f000 fd1e 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON5_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000850:	f245 0302 	movw	r3, #20482	@ 0x5002
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000856:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0x1a0>)
 8000868:	f000 fd10 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON4_Pin;
 800086c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4810      	ldr	r0, [pc, #64]	@ (80008c4 <MX_GPIO_Init+0x19c>)
 8000884:	f000 fd02 	bl	800128c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2007      	movs	r0, #7
 800088e:	f000 fcc6 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000892:	2007      	movs	r0, #7
 8000894:	f000 fcdf 	bl	8001256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2017      	movs	r0, #23
 800089e:	f000 fcbe 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008a2:	2017      	movs	r0, #23
 80008a4:	f000 fcd7 	bl	8001256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2028      	movs	r0, #40	@ 0x28
 80008ae:	f000 fcb6 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b2:	2028      	movs	r0, #40	@ 0x28
 80008b4:	f000 fccf 	bl	8001256 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	@ 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48000400 	.word	0x48000400

080008cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime;

	if (GPIO_Pin == BUTTON1_Pin) { /// fan
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008dc:	d12d      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x6e>
		currentTime = HAL_GetTick();
 80008de:	f000 fb93 	bl	8001008 <HAL_GetTick>
 80008e2:	60f8      	str	r0, [r7, #12]

	    if ((currentTime - lastButtonPressTime[0]) > DEBOUNCE_THRESHOLD) {
 80008e4:	4ba3      	ldr	r3, [pc, #652]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b32      	cmp	r3, #50	@ 0x32
 80008ee:	d924      	bls.n	800093a <HAL_GPIO_EXTI_Callback+0x6e>
	    	lastButtonPressTime[0] = currentTime;  // Update last press time
 80008f0:	4aa0      	ldr	r2, [pc, #640]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6013      	str	r3, [r2, #0]

	        if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET) {
 80008f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008fa:	489f      	ldr	r0, [pc, #636]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80008fc:	f000 fe58 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d106      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x48>
	          buttonStates ^= 0b00000001;
 8000906:	4b9d      	ldr	r3, [pc, #628]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	f083 0301 	eor.w	r3, r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b9a      	ldr	r3, [pc, #616]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000912:	701a      	strb	r2, [r3, #0]
	        }

          if (buttonStates & 0b00000001) 
 8000914:	4b99      	ldr	r3, [pc, #612]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <HAL_GPIO_EXTI_Callback+0x62>
        	  HAL_GPIO_WritePin(BUTTON1_LED_GPIO_Port, BUTTON1_LED_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000926:	4894      	ldr	r0, [pc, #592]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000928:	f000 fe5a 	bl	80015e0 <HAL_GPIO_WritePin>
 800092c:	e005      	b.n	800093a <HAL_GPIO_EXTI_Callback+0x6e>
          else 
        	  HAL_GPIO_WritePin(BUTTON1_LED_GPIO_Port, BUTTON1_LED_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	4890      	ldr	r0, [pc, #576]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000936:	f000 fe53 	bl	80015e0 <HAL_GPIO_WritePin>
          
	    }
	}
	if (GPIO_Pin == BUTTON2_Pin) { // display
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000940:	d12d      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0xd2>
		currentTime = HAL_GetTick();
 8000942:	f000 fb61 	bl	8001008 <HAL_GetTick>
 8000946:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[1]) > DEBOUNCE_THRESHOLD) {
 8000948:	4b8a      	ldr	r3, [pc, #552]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b32      	cmp	r3, #50	@ 0x32
 8000952:	d924      	bls.n	800099e <HAL_GPIO_EXTI_Callback+0xd2>
			lastButtonPressTime[1] = currentTime;  // Update last press time
 8000954:	4a87      	ldr	r2, [pc, #540]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6053      	str	r3, [r2, #4]

		    if (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET) {
 800095a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095e:	4886      	ldr	r0, [pc, #536]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000960:	f000 fe26 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d106      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0xac>
		    	buttonStates ^= 0b00000010;
 800096a:	4b84      	ldr	r3, [pc, #528]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f083 0302 	eor.w	r3, r3, #2
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b81      	ldr	r3, [pc, #516]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000976:	701a      	strb	r2, [r3, #0]
		    }

          if (buttonStates & 0b00000010) 
 8000978:	4b80      	ldr	r3, [pc, #512]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d006      	beq.n	8000992 <HAL_GPIO_EXTI_Callback+0xc6>
        	  HAL_GPIO_WritePin(BUTTON2_LED_GPIO_Port, BUTTON2_LED_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098a:	487b      	ldr	r0, [pc, #492]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800098c:	f000 fe28 	bl	80015e0 <HAL_GPIO_WritePin>
 8000990:	e005      	b.n	800099e <HAL_GPIO_EXTI_Callback+0xd2>
          else 
        	  HAL_GPIO_WritePin(BUTTON2_LED_GPIO_Port, BUTTON2_LED_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000998:	4877      	ldr	r0, [pc, #476]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800099a:	f000 fe21 	bl	80015e0 <HAL_GPIO_WritePin>
		}
	}

	if (GPIO_Pin == BUTTON3_Pin) { // hazards
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	2b40      	cmp	r3, #64	@ 0x40
 80009a2:	d144      	bne.n	8000a2e <HAL_GPIO_EXTI_Callback+0x162>
		currentTime = HAL_GetTick();
 80009a4:	f000 fb30 	bl	8001008 <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[2]) > DEBOUNCE_THRESHOLD) {
 80009aa:	4b72      	ldr	r3, [pc, #456]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b32      	cmp	r3, #50	@ 0x32
 80009b4:	d93b      	bls.n	8000a2e <HAL_GPIO_EXTI_Callback+0x162>
			lastButtonPressTime[2] = currentTime;  // Update last press time
 80009b6:	4a6f      	ldr	r2, [pc, #444]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6093      	str	r3, [r2, #8]

			if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_RESET) {
 80009bc:	2140      	movs	r1, #64	@ 0x40
 80009be:	4870      	ldr	r0, [pc, #448]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009c0:	f000 fdf6 	bl	80015b0 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d114      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x128>
				buttonStates ^= 0b00000100;
 80009ca:	4b6c      	ldr	r3, [pc, #432]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f083 0304 	eor.w	r3, r3, #4
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b69      	ldr	r3, [pc, #420]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009d6:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11110111; // turn off left turn
 80009d8:	4b68      	ldr	r3, [pc, #416]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f023 0308 	bic.w	r3, r3, #8
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b66      	ldr	r3, [pc, #408]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009e4:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b01111111; // turn off right turn
 80009e6:	4b65      	ldr	r3, [pc, #404]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b62      	ldr	r3, [pc, #392]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009f2:	701a      	strb	r2, [r3, #0]
			}

          if (buttonStates & 0b00000100) {
 80009f4:	4b61      	ldr	r3, [pc, #388]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d011      	beq.n	8000a24 <HAL_GPIO_EXTI_Callback+0x158>
        	  HAL_GPIO_WritePin(BUTTON3_LED_GPIO_Port, BUTTON3_LED_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2180      	movs	r1, #128	@ 0x80
 8000a04:	485e      	ldr	r0, [pc, #376]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a06:	f000 fdeb 	bl	80015e0 <HAL_GPIO_WritePin>
            // turn off left and right turn lights
            HAL_GPIO_WritePin(BUTTON4_LED_GPIO_Port, BUTTON4_LED_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a10:	485b      	ldr	r0, [pc, #364]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a12:	f000 fde5 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	@ 0x40
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 fddf 	bl	80015e0 <HAL_GPIO_WritePin>
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x162>
          }
          else 
        	  HAL_GPIO_WritePin(BUTTON3_LED_GPIO_Port, BUTTON3_LED_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	4855      	ldr	r0, [pc, #340]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a2a:	f000 fdd9 	bl	80015e0 <HAL_GPIO_WritePin>
		}
	}

	if (GPIO_Pin == BUTTON4_Pin) { // left turn
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a34:	d146      	bne.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x1f8>
		currentTime = HAL_GetTick();
 8000a36:	f000 fae7 	bl	8001008 <HAL_GetTick>
 8000a3a:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[3]) > DEBOUNCE_THRESHOLD) {
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	2b32      	cmp	r3, #50	@ 0x32
 8000a46:	d93d      	bls.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x1f8>
			lastButtonPressTime[3] = currentTime;  // Update last press time
 8000a48:	4a4a      	ldr	r2, [pc, #296]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60d3      	str	r3, [r2, #12]

			if (HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) == GPIO_PIN_RESET) {
 8000a4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a52:	484b      	ldr	r0, [pc, #300]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a54:	f000 fdac 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d114      	bne.n	8000a88 <HAL_GPIO_EXTI_Callback+0x1bc>
				buttonStates ^= 0b00001000;
 8000a5e:	4b47      	ldr	r3, [pc, #284]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f083 0308 	eor.w	r3, r3, #8
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b44      	ldr	r3, [pc, #272]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a6a:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b01111111; // turn off right turn
 8000a6c:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b41      	ldr	r3, [pc, #260]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a78:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 8000a7a:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	f023 0304 	bic.w	r3, r3, #4
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b3d      	ldr	r3, [pc, #244]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a86:	701a      	strb	r2, [r3, #0]
			}

          if (buttonStates & 0b00001000) {
 8000a88:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d011      	beq.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x1ec>
        	  HAL_GPIO_WritePin(BUTTON4_LED_GPIO_Port, BUTTON4_LED_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9a:	4839      	ldr	r0, [pc, #228]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a9c:	f000 fda0 	bl	80015e0 <HAL_GPIO_WritePin>
            // turn off right turn light
            HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa8:	f000 fd9a 	bl	80015e0 <HAL_GPIO_WritePin>
            // turn off hazards
            HAL_GPIO_WritePin(BUTTON3_LED_GPIO_Port, BUTTON3_LED_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	@ 0x80
 8000ab0:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ab2:	f000 fd95 	bl	80015e0 <HAL_GPIO_WritePin>
 8000ab6:	e005      	b.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x1f8>
          }
          else 
        	  HAL_GPIO_WritePin(BUTTON4_LED_GPIO_Port, BUTTON4_LED_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000abe:	4830      	ldr	r0, [pc, #192]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ac0:	f000 fd8e 	bl	80015e0 <HAL_GPIO_WritePin>
		}
	}

	if (GPIO_Pin == BUTTON5_Pin) { // ptt
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d12a      	bne.n	8000b20 <HAL_GPIO_EXTI_Callback+0x254>
		currentTime = HAL_GetTick();
 8000aca:	f000 fa9d 	bl	8001008 <HAL_GetTick>
 8000ace:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[4]) > DEBOUNCE_THRESHOLD) {
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b32      	cmp	r3, #50	@ 0x32
 8000ada:	d921      	bls.n	8000b20 <HAL_GPIO_EXTI_Callback+0x254>
			lastButtonPressTime[4] = currentTime;  // Update last press time
 8000adc:	4a25      	ldr	r2, [pc, #148]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6113      	str	r3, [r2, #16]

			if (HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin) == GPIO_PIN_RESET) {
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4824      	ldr	r0, [pc, #144]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000ae6:	f000 fd63 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d106      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x232>
				buttonStates ^= 0b00010000;
 8000af0:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f083 0310 	eor.w	r3, r3, #16
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000afc:	701a      	strb	r2, [r3, #0]
			}
          if (buttonStates & 0b00010000) 
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <HAL_GPIO_EXTI_Callback+0x24a>
        	  HAL_GPIO_WritePin(BUTTON5_LED_GPIO_Port, BUTTON5_LED_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b10:	f000 fd66 	bl	80015e0 <HAL_GPIO_WritePin>
 8000b14:	e004      	b.n	8000b20 <HAL_GPIO_EXTI_Callback+0x254>
          else 
        	  HAL_GPIO_WritePin(BUTTON5_LED_GPIO_Port, BUTTON5_LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b1c:	f000 fd60 	bl	80015e0 <HAL_GPIO_WritePin>
		}
	}



	if (GPIO_Pin == BUTTON7_Pin) { // headlights
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	2b80      	cmp	r3, #128	@ 0x80
 8000b24:	d133      	bne.n	8000b8e <HAL_GPIO_EXTI_Callback+0x2c2>
		currentTime = HAL_GetTick();
 8000b26:	f000 fa6f 	bl	8001008 <HAL_GetTick>
 8000b2a:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[6]) > DEBOUNCE_THRESHOLD) {
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b32      	cmp	r3, #50	@ 0x32
 8000b36:	d92a      	bls.n	8000b8e <HAL_GPIO_EXTI_Callback+0x2c2>
			lastButtonPressTime[6] = currentTime;  // Update last press time
 8000b38:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6193      	str	r3, [r2, #24]

			if (HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin) == GPIO_PIN_RESET) {
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b44:	f000 fd34 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x290>
				buttonStates ^= 0b01000000;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000b5a:	701a      	strb	r2, [r3, #0]

			}
          if (buttonStates & 0b01000000) 
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_EXTI_Callback+0x2b8>
        	  HAL_GPIO_WritePin(BUTTON7_LED_GPIO_Port, BUTTON7_LED_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b6e:	f000 fd37 	bl	80015e0 <HAL_GPIO_WritePin>
 8000b72:	e00c      	b.n	8000b8e <HAL_GPIO_EXTI_Callback+0x2c2>
 8000b74:	20000138 	.word	0x20000138
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	20000158 	.word	0x20000158
 8000b80:	48000800 	.word	0x48000800
          else 
        	  HAL_GPIO_WritePin(BUTTON7_LED_GPIO_Port, BUTTON7_LED_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x360>)
 8000b8a:	f000 fd29 	bl	80015e0 <HAL_GPIO_WritePin>
		}
	}

	if (GPIO_Pin == BUTTON8_Pin) { // right turn
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	2b20      	cmp	r3, #32
 8000b92:	d146      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x356>
		currentTime = HAL_GetTick();
 8000b94:	f000 fa38 	bl	8001008 <HAL_GetTick>
 8000b98:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[7]) > DEBOUNCE_THRESHOLD) {
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x364>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b32      	cmp	r3, #50	@ 0x32
 8000ba4:	d93d      	bls.n	8000c22 <HAL_GPIO_EXTI_Callback+0x356>
			lastButtonPressTime[7] = currentTime;  // Update last press time
 8000ba6:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x364>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	61d3      	str	r3, [r2, #28]

			if (HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin) == GPIO_PIN_RESET) {
 8000bac:	2120      	movs	r1, #32
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f000 fcfd 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d115      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0x31c>
				buttonStates ^= 0b10000000;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bca:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b11110111; // turn of left turn
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f023 0308 	bic.w	r3, r3, #8
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bd8:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f023 0304 	bic.w	r3, r3, #4
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000be6:	701a      	strb	r2, [r3, #0]
			}
          if (buttonStates & 0b10000000) {
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da11      	bge.n	8000c16 <HAL_GPIO_EXTI_Callback+0x34a>
        	  HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2140      	movs	r1, #64	@ 0x40
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f000 fcf1 	bl	80015e0 <HAL_GPIO_WritePin>
            // turn off left turn light
            HAL_GPIO_WritePin(BUTTON4_LED_GPIO_Port, BUTTON4_LED_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x360>)
 8000c06:	f000 fceb 	bl	80015e0 <HAL_GPIO_WritePin>
            // turn off hazards
            HAL_GPIO_WritePin(BUTTON3_LED_GPIO_Port, BUTTON3_LED_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2180      	movs	r1, #128	@ 0x80
 8000c0e:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x360>)
 8000c10:	f000 fce6 	bl	80015e0 <HAL_GPIO_WritePin>





}
 8000c14:	e005      	b.n	8000c22 <HAL_GPIO_EXTI_Callback+0x356>
        	  HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2140      	movs	r1, #64	@ 0x40
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f000 fcdf 	bl	80015e0 <HAL_GPIO_WritePin>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000800 	.word	0x48000800
 8000c30:	20000138 	.word	0x20000138
 8000c34:	20000158 	.word	0x20000158

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b0      	sub	sp, #192	@ 0xc0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	228c      	movs	r2, #140	@ 0x8c
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f002 fdf8 	bl	80038a2 <memset>
  if(huart->Instance==UART4)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a53      	ldr	r2, [pc, #332]	@ (8000e04 <HAL_UART_MspInit+0x178>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13c      	bne.n	8000d36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fb75 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd4:	f7ff ffb0 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000cde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce4:	4b48      	ldr	r3, [pc, #288]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a44      	ldr	r2, [pc, #272]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfc:	4b42      	ldr	r3, [pc, #264]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d22:	2308      	movs	r3, #8
 8000d24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4837      	ldr	r0, [pc, #220]	@ (8000e0c <HAL_UART_MspInit+0x180>)
 8000d30:	f000 faac 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d34:	e061      	b.n	8000dfa <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==UART5)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	@ (8000e10 <HAL_UART_MspInit+0x184>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d15c      	bne.n	8000dfa <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d40:	2310      	movs	r3, #16
 8000d42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fb33 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d58:	f7ff ff6e 	bl	8000c38 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	4a29      	ldr	r2, [pc, #164]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_UART_MspInit+0x17c>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <HAL_UART_MspInit+0x180>)
 8000dcc:	f000 fa5e 	bl	800128c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000de8:	2308      	movs	r3, #8
 8000dea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <HAL_UART_MspInit+0x188>)
 8000df6:	f000 fa49 	bl	800128c <HAL_GPIO_Init>
}
 8000dfa:	bf00      	nop
 8000dfc:	37c0      	adds	r7, #192	@ 0xc0
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	40005000 	.word	0x40005000
 8000e14:	48000c00 	.word	0x48000c00

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6e:	f000 f8b7 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f000 fbe2 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_Pin);
 8000e88:	2020      	movs	r0, #32
 8000e8a:	f000 fbdb 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_LED_Pin);
 8000e8e:	2040      	movs	r0, #64	@ 0x40
 8000e90:	f000 fbd8 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON7_Pin);
 8000e94:	2080      	movs	r0, #128	@ 0x80
 8000e96:	f000 fbd5 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8000e9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e9e:	f000 fbd1 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8000eaa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000eae:	f000 fbc9 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8000eb2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000eb6:	f000 fbc5 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff ffea 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eee:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <LoopForever+0xe>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f04:	4c0a      	ldr	r4, [pc, #40]	@ (8000f30 <LoopForever+0x16>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f002 fccf 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f16:	f7ff faff 	bl	8000518 <main>

08000f1a <LoopForever>:

LoopForever:
    b LoopForever
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f28:	0800396c 	.word	0x0800396c
  ldr r2, =_sbss
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f30:	20000160 	.word	0x20000160

08000f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_2_IRQHandler>

08000f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f961 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f80e 	bl	8000f68 <HAL_InitTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e001      	b.n	8000f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f58:	f7ff fe74 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_InitTick+0x70>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f96d 	bl	8001272 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f937 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	2000015c 	.word	0x2000015c

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000015c 	.word	0x2000015c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e166      	b.n	800156a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8158 	beq.w	8001564 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b2 	beq.w	8001564 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b61      	ldr	r3, [pc, #388]	@ (8001588 <HAL_GPIO_Init+0x2fc>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001404:	4a60      	ldr	r2, [pc, #384]	@ (8001588 <HAL_GPIO_Init+0x2fc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	@ 0x60
 800140c:	4b5e      	ldr	r3, [pc, #376]	@ (8001588 <HAL_GPIO_Init+0x2fc>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a5c      	ldr	r2, [pc, #368]	@ (800158c <HAL_GPIO_Init+0x300>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001442:	d02b      	beq.n	800149c <HAL_GPIO_Init+0x210>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_GPIO_Init+0x304>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d025      	beq.n	8001498 <HAL_GPIO_Init+0x20c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a51      	ldr	r2, [pc, #324]	@ (8001594 <HAL_GPIO_Init+0x308>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d01f      	beq.n	8001494 <HAL_GPIO_Init+0x208>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a50      	ldr	r2, [pc, #320]	@ (8001598 <HAL_GPIO_Init+0x30c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d019      	beq.n	8001490 <HAL_GPIO_Init+0x204>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4f      	ldr	r2, [pc, #316]	@ (800159c <HAL_GPIO_Init+0x310>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d013      	beq.n	800148c <HAL_GPIO_Init+0x200>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4e      	ldr	r2, [pc, #312]	@ (80015a0 <HAL_GPIO_Init+0x314>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d00d      	beq.n	8001488 <HAL_GPIO_Init+0x1fc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4d      	ldr	r2, [pc, #308]	@ (80015a4 <HAL_GPIO_Init+0x318>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4c      	ldr	r2, [pc, #304]	@ (80015a8 <HAL_GPIO_Init+0x31c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_GPIO_Init+0x1f4>
 800147c:	2307      	movs	r3, #7
 800147e:	e00e      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001480:	2308      	movs	r3, #8
 8001482:	e00c      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001484:	2306      	movs	r3, #6
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001488:	2305      	movs	r3, #5
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x212>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x212>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	@ (800158c <HAL_GPIO_Init+0x300>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b3b      	ldr	r3, [pc, #236]	@ (80015ac <HAL_GPIO_Init+0x320>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a32      	ldr	r2, [pc, #200]	@ (80015ac <HAL_GPIO_Init+0x320>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <HAL_GPIO_Init+0x320>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <HAL_GPIO_Init+0x320>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001510:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <HAL_GPIO_Init+0x320>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1d      	ldr	r2, [pc, #116]	@ (80015ac <HAL_GPIO_Init+0x320>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <HAL_GPIO_Init+0x320>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <HAL_GPIO_Init+0x320>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae91 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	48001800 	.word	0x48001800
 80015a8:	48001c00 	.word	0x48001c00
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43d9      	mvns	r1, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	400b      	ands	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f932 	bl	80008cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <HAL_PWREx_GetVoltageRange+0x18>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40007000 	.word	0x40007000

08001690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800169e:	d130      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ac:	d038      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2232      	movs	r2, #50	@ 0x32
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d4:	e002      	b.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e8:	d102      	bne.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f2      	bne.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016fc:	d110      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e00f      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170e:	d007      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001718:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83

0800173c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 bc08 	b.w	8001f60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001750:	4b96      	ldr	r3, [pc, #600]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175a:	4b94      	ldr	r3, [pc, #592]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80e4 	beq.w	800193a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_RCC_OscConfig+0x4c>
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	f040 808b 	bne.w	8001896 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 8087 	bne.w	8001896 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001788:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x64>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e3df      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_RCC_OscConfig+0x7e>
 80017b0:	4b7e      	ldr	r3, [pc, #504]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_OscConfig+0x8a>
 80017ba:	4b7c      	ldr	r3, [pc, #496]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d223      	bcs.n	8001812 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fd92 	bl	80022f8 <RCC_SetFlashLatencyFromMSIRange>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e3c0      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a72      	ldr	r2, [pc, #456]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	496d      	ldr	r1, [pc, #436]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fc:	4b6b      	ldr	r3, [pc, #428]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	4968      	ldr	r1, [pc, #416]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e025      	b.n	800185e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a65      	ldr	r2, [pc, #404]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4960      	ldr	r1, [pc, #384]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b5e      	ldr	r3, [pc, #376]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	495b      	ldr	r1, [pc, #364]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fd52 	bl	80022f8 <RCC_SetFlashLatencyFromMSIRange>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e380      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185e:	f000 fc87 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b51      	ldr	r3, [pc, #324]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4950      	ldr	r1, [pc, #320]	@ (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a4e      	ldr	r2, [pc, #312]	@ (80019b4 <HAL_RCC_OscConfig+0x278>)
 800187c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fb70 	bl	8000f68 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d052      	beq.n	8001938 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	e364      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d032      	beq.n	8001904 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800189e:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fbad 	bl	8001008 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b2:	f7ff fba9 	bl	8001008 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e34d      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d0:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a35      	ldr	r2, [pc, #212]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b33      	ldr	r3, [pc, #204]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4930      	ldr	r1, [pc, #192]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	492b      	ldr	r1, [pc, #172]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e01a      	b.n	800193a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a28      	ldr	r2, [pc, #160]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001910:	f7ff fb7a 	bl	8001008 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001918:	f7ff fb76 	bl	8001008 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e31a      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1dc>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d073      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d005      	beq.n	8001958 <HAL_RCC_OscConfig+0x21c>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d10e      	bne.n	8001970 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d063      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d15f      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e2f7      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x24c>
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e025      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001990:	d114      	bne.n	80019bc <HAL_RCC_OscConfig+0x280>
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a02      	ldr	r2, [pc, #8]	@ (80019ac <HAL_RCC_OscConfig+0x270>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003914 	.word	0x08003914
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004
 80019bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fb14 	bl	8001008 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fb10 	bl	8001008 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	@ 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e2b4      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b92      	ldr	r3, [pc, #584]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2a8>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb00 	bl	8001008 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fafc 	bl	8001008 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a0      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2d0>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d060      	beq.n	8001afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x310>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d116      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x328>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e27d      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4973      	ldr	r1, [pc, #460]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e040      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fabb 	bl	8001008 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff fab7 	bl	8001008 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e25b      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b62      	ldr	r3, [pc, #392]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	495f      	ldr	r1, [pc, #380]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e018      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5c      	ldr	r2, [pc, #368]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fa97 	bl	8001008 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff fa93 	bl	8001008 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e237      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d03c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b4b      	ldr	r3, [pc, #300]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b16:	4a4a      	ldr	r2, [pc, #296]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff fa72 	bl	8001008 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fa6e 	bl	8001008 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e212      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ef      	beq.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
 8001b48:	e01b      	b.n	8001b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b50:	4a3b      	ldr	r2, [pc, #236]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fa55 	bl	8001008 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa51 	bl	8001008 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1f5      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ef      	bne.n	8001b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d118      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa18 	bl	8001008 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff fa14 	bl	8001008 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1b8      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d8>
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c12:	e029      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d115      	bne.n	8001c48 <HAL_RCC_OscConfig+0x50c>
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c22:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c32:	4a03      	ldr	r2, [pc, #12]	@ (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	4b9d      	ldr	r3, [pc, #628]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c58:	4b99      	ldr	r3, [pc, #612]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5e:	4a98      	ldr	r2, [pc, #608]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d016      	beq.n	8001c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f9ca 	bl	8001008 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f9c6 	bl	8001008 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e168      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ed      	beq.n	8001c78 <HAL_RCC_OscConfig+0x53c>
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f9b3 	bl	8001008 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f9af 	bl	8001008 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e151      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	4b80      	ldr	r3, [pc, #512]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ed      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	4a7a      	ldr	r2, [pc, #488]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cf0:	4b73      	ldr	r3, [pc, #460]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf6:	4a72      	ldr	r2, [pc, #456]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f982 	bl	8001008 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d08:	f7ff f97e 	bl	8001008 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e122      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	4b69      	ldr	r3, [pc, #420]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCC_OscConfig+0x5cc>
 8001d28:	e01b      	b.n	8001d62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d2a:	4b65      	ldr	r3, [pc, #404]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d30:	4a63      	ldr	r2, [pc, #396]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f965 	bl	8001008 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d42:	f7ff f961 	bl	8001008 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e105      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80f9 	beq.w	8001f5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	f040 80cf 	bne.w	8001f14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d76:	4b52      	ldr	r3, [pc, #328]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d12c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	3b01      	subs	r3, #1
 8001d96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d123      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d11b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d113      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d109      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d071      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d068      	beq.n	8001ebc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dea:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001df6:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0ac      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e12:	f7ff f8f9 	bl	8001008 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f8f5 	bl	8001008 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e099      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_RCC_OscConfig+0x788>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e48:	3a01      	subs	r2, #1
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e5a:	0852      	lsrs	r2, r2, #1
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0552      	lsls	r2, r2, #21
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0652      	lsls	r2, r2, #25
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e72:	06d2      	lsls	r2, r2, #27
 8001e74:	430a      	orrs	r2, r1
 8001e76:	4912      	ldr	r1, [pc, #72]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e94:	f7ff f8b8 	bl	8001008 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f8b4 	bl	8001008 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e058      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eba:	e050      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e04f      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d144      	bne.n	8001f5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee0:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eec:	f7ff f88c 	bl	8001008 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff f888 	bl	8001008 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e02c      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x7b8>
 8001f12:	e024      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d01f      	beq.n	8001f5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff f86f 	bl	8001008 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff f86b 	bl	8001008 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4905      	ldr	r1, [pc, #20]	@ (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_OscConfig+0x830>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
 8001f58:	e001      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	feeefffc 	.word	0xfeeefffc

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0e7      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b75      	ldr	r3, [pc, #468]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b72      	ldr	r3, [pc, #456]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4970      	ldr	r1, [pc, #448]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0cf      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	4b66      	ldr	r3, [pc, #408]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b63      	ldr	r3, [pc, #396]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4960      	ldr	r1, [pc, #384]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04c      	beq.n	8002088 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d121      	bne.n	8002046 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0a6      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200e:	4b54      	ldr	r3, [pc, #336]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09a      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002026:	4b4e      	ldr	r3, [pc, #312]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e08e      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002036:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e086      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4943      	ldr	r1, [pc, #268]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002058:	f7fe ffd6 	bl	8001008 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe ffd2 	bl	8001008 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e06e      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b3a      	ldr	r3, [pc, #232]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d208      	bcs.n	80020b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	492b      	ldr	r1, [pc, #172]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b6:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d210      	bcs.n	80020e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c4:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 0207 	bic.w	r2, r3, #7
 80020cc:	4923      	ldr	r1, [pc, #140]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_RCC_ClockConfig+0x1ec>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e036      	b.n	8002154 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4918      	ldr	r1, [pc, #96]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4910      	ldr	r1, [pc, #64]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002124:	f000 f824 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	490b      	ldr	r1, [pc, #44]	@ (8002164 <HAL_RCC_ClockConfig+0x1f4>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <HAL_RCC_ClockConfig+0x1fc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe ff0d 	bl	8000f68 <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	72fb      	strb	r3, [r7, #11]

  return status;
 8002152:	7afb      	ldrb	r3, [r7, #11]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	08003914 	.word	0x08003914
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002188:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d121      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d11e      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021a4:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b0:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	e005      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021cc:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d102      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e004      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x114>)
 80021f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d134      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0xa6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0xac>
 8002214:	e005      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x110>)
 8002218:	617b      	str	r3, [r7, #20]
      break;
 800221a:	e005      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x114>)
 800221e:	617b      	str	r3, [r7, #20]
      break;
 8002220:	e002      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	617b      	str	r3, [r7, #20]
      break;
 8002226:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	fb03 f202 	mul.w	r2, r3, r2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x108>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	0e5b      	lsrs	r3, r3, #25
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	3301      	adds	r3, #1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002268:	69bb      	ldr	r3, [r7, #24]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	0800392c 	.word	0x0800392c
 8002280:	00f42400 	.word	0x00f42400
 8002284:	007a1200 	.word	0x007a1200

08002288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_RCC_GetHCLKFreq+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000000 	.word	0x20000000

080022a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022a4:	f7ff fff0 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4904      	ldr	r1, [pc, #16]	@ (80022c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08003924 	.word	0x08003924

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d0:	f7ff ffda 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4904      	ldr	r1, [pc, #16]	@ (80022f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003924 	.word	0x08003924

080022f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002304:	4b2a      	ldr	r3, [pc, #168]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002310:	f7ff f9b0 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 8002314:	6178      	str	r0, [r7, #20]
 8002316:	e014      	b.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	4a24      	ldr	r2, [pc, #144]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002322:	6593      	str	r3, [r2, #88]	@ 0x58
 8002324:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002330:	f7ff f9a0 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 8002334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002348:	d10b      	bne.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b80      	cmp	r3, #128	@ 0x80
 800234e:	d919      	bls.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2ba0      	cmp	r3, #160	@ 0xa0
 8002354:	d902      	bls.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002356:	2302      	movs	r3, #2
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e013      	b.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800235c:	2301      	movs	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e010      	b.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b80      	cmp	r3, #128	@ 0x80
 8002366:	d902      	bls.n	800236e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002368:	2303      	movs	r3, #3
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	e00a      	b.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b80      	cmp	r3, #128	@ 0x80
 8002372:	d102      	bne.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002374:	2302      	movs	r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	e004      	b.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b70      	cmp	r3, #112	@ 0x70
 800237e:	d101      	bne.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002380:	2301      	movs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	4909      	ldr	r1, [pc, #36]	@ (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c4:	2300      	movs	r3, #0
 80023c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d041      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023dc:	d02a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023e2:	d824      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ee:	d81e      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f8:	d010      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023fa:	e018      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023fc:	4b86      	ldr	r3, [pc, #536]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a85      	ldr	r2, [pc, #532]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002408:	e015      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f000 facd 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800241a:	e00c      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3320      	adds	r3, #32
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fbb6 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800242c:	e003      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	74fb      	strb	r3, [r7, #19]
      break;
 8002432:	e000      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800243c:	4b76      	ldr	r3, [pc, #472]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800244a:	4973      	ldr	r1, [pc, #460]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002452:	e001      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d041      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002468:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800246c:	d02a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800246e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002472:	d824      	bhi.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002474:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800247a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800247e:	d81e      	bhi.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002488:	d010      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800248a:	e018      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800248c:	4b62      	ldr	r3, [pc, #392]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a61      	ldr	r2, [pc, #388]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002496:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002498:	e015      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fa85 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024aa:	e00c      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3320      	adds	r3, #32
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fb6e 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024bc:	e003      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	74fb      	strb	r3, [r7, #19]
      break;
 80024c2:	e000      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024cc:	4b52      	ldr	r3, [pc, #328]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	494f      	ldr	r1, [pc, #316]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024e2:	e001      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a0 	beq.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024fa:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00d      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	4a40      	ldr	r2, [pc, #256]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	@ 0x58
 800251c:	4b3e      	ldr	r3, [pc, #248]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002528:	2301      	movs	r3, #1
 800252a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3a      	ldr	r2, [pc, #232]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002538:	f7fe fd66 	bl	8001008 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253e:	e009      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fd62 	bl	8001008 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	74fb      	strb	r3, [r7, #19]
        break;
 8002552:	e005      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002554:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d15c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002570:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01f      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d019      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b0:	4a19      	ldr	r2, [pc, #100]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fd21 	bl	8001008 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c8:	e00b      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fd1d 	bl	8001008 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d902      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	74fb      	strb	r3, [r7, #19]
            break;
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ec      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	4904      	ldr	r1, [pc, #16]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800260e:	e009      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002624:	7c7b      	ldrb	r3, [r7, #17]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4ba6      	ldr	r3, [pc, #664]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4aa5      	ldr	r2, [pc, #660]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002642:	4ba0      	ldr	r3, [pc, #640]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	499c      	ldr	r1, [pc, #624]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002664:	4b97      	ldr	r3, [pc, #604]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f023 020c 	bic.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	4994      	ldr	r1, [pc, #592]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002686:	4b8f      	ldr	r3, [pc, #572]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	498b      	ldr	r1, [pc, #556]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a8:	4b86      	ldr	r3, [pc, #536]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	4983      	ldr	r1, [pc, #524]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026ca:	4b7e      	ldr	r3, [pc, #504]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	497a      	ldr	r1, [pc, #488]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ec:	4b75      	ldr	r3, [pc, #468]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	4972      	ldr	r1, [pc, #456]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270e:	4b6d      	ldr	r3, [pc, #436]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002714:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271c:	4969      	ldr	r1, [pc, #420]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800273e:	4961      	ldr	r1, [pc, #388]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002752:	4b5c      	ldr	r3, [pc, #368]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002758:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002760:	4958      	ldr	r1, [pc, #352]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002774:	4b53      	ldr	r3, [pc, #332]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	4950      	ldr	r1, [pc, #320]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002796:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4947      	ldr	r1, [pc, #284]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	493f      	ldr	r1, [pc, #252]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d028      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027da:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4936      	ldr	r1, [pc, #216]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f8:	d106      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a31      	ldr	r2, [pc, #196]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002804:	60d3      	str	r3, [r2, #12]
 8002806:	e011      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f8c9 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d028      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002838:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002846:	491f      	ldr	r1, [pc, #124]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002856:	d106      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
 8002864:	e011      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800286e:	d10c      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f89a 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d02a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028a4:	4907      	ldr	r1, [pc, #28]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028b4:	d108      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b6:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a02      	ldr	r2, [pc, #8]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028c0:	60d3      	str	r3, [r2, #12]
 80028c2:	e013      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x534>
 80028c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f869 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02f      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f8:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002906:	4929      	ldr	r1, [pc, #164]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f846 	bl	80029b0 <RCCEx_PLLSAI1_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	74bb      	strb	r3, [r7, #18]
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800293c:	d10c      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3320      	adds	r3, #32
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f925 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002974:	490d      	ldr	r1, [pc, #52]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002998:	4904      	ldr	r1, [pc, #16]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029be:	4b74      	ldr	r3, [pc, #464]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ca:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d10d      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
       ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
       ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d047      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e044      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d018      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x86>
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d825      	bhi.n	8002a54 <RCCEx_PLLSAI1_Config+0xa4>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d002      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0x62>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d009      	beq.n	8002a24 <RCCEx_PLLSAI1_Config+0x74>
 8002a10:	e020      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a12:	4b5f      	ldr	r3, [pc, #380]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11d      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e01a      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a24:	4b5a      	ldr	r3, [pc, #360]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e013      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a36:	4b56      	ldr	r3, [pc, #344]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a42:	4b53      	ldr	r3, [pc, #332]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a52:	e006      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e004      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6a:	4b49      	ldr	r3, [pc, #292]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	4943      	ldr	r1, [pc, #268]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d17c      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a8c:	4b40      	ldr	r3, [pc, #256]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3f      	ldr	r2, [pc, #252]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fab6 	bl	8001008 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a9e:	e009      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa0:	f7fe fab2 	bl	8001008 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab2:	e005      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab4:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ef      	bne.n	8002aa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d15f      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d110      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002acc:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ad4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6892      	ldr	r2, [r2, #8]
 8002adc:	0211      	lsls	r1, r2, #8
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	06d2      	lsls	r2, r2, #27
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	492a      	ldr	r1, [pc, #168]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	610b      	str	r3, [r1, #16]
 8002aec:	e027      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d112      	bne.n	8002b1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af4:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002afc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6892      	ldr	r2, [r2, #8]
 8002b04:	0211      	lsls	r1, r2, #8
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6912      	ldr	r2, [r2, #16]
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0552      	lsls	r2, r2, #21
 8002b10:	430a      	orrs	r2, r1
 8002b12:	491f      	ldr	r1, [pc, #124]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	610b      	str	r3, [r1, #16]
 8002b18:	e011      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	0211      	lsls	r1, r2, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6952      	ldr	r2, [r2, #20]
 8002b30:	0852      	lsrs	r2, r2, #1
 8002b32:	3a01      	subs	r2, #1
 8002b34:	0652      	lsls	r2, r2, #25
 8002b36:	430a      	orrs	r2, r1
 8002b38:	4915      	ldr	r1, [pc, #84]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a13      	ldr	r2, [pc, #76]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fa5d 	bl	8001008 <HAL_GetTick>
 8002b4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b50:	e009      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b52:	f7fe fa59 	bl	8001008 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d902      	bls.n	8002b66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	73fb      	strb	r3, [r7, #15]
          break;
 8002b64:	e005      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ef      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4903      	ldr	r1, [pc, #12]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba2:	4b69      	ldr	r3, [pc, #420]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bae:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bc6:	4b60      	ldr	r3, [pc, #384]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d047      	beq.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e044      	b.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d018      	beq.n	8002c1a <RCCEx_PLLSAI2_Config+0x86>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d825      	bhi.n	8002c38 <RCCEx_PLLSAI2_Config+0xa4>
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <RCCEx_PLLSAI2_Config+0x62>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d009      	beq.n	8002c08 <RCCEx_PLLSAI2_Config+0x74>
 8002bf4:	e020      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf6:	4b54      	ldr	r3, [pc, #336]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11d      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e01a      	b.n	8002c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c08:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e013      	b.n	8002c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c26:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c36:	e006      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e004      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	430b      	orrs	r3, r1
 8002c64:	4938      	ldr	r1, [pc, #224]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d166      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c70:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f9c4 	bl	8001008 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c84:	f7fe f9c0 	bl	8001008 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
        break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c98:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ef      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d149      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d110      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	06d2      	lsls	r2, r2, #27
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	491f      	ldr	r1, [pc, #124]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
 8002cd0:	e011      	b.n	8002cf6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	0211      	lsls	r1, r2, #8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6912      	ldr	r2, [r2, #16]
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0652      	lsls	r2, r2, #25
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	4915      	ldr	r1, [pc, #84]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cf6:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe f981 	bl	8001008 <HAL_GetTick>
 8002d06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d08:	e009      	b.n	8002d1e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d0a:	f7fe f97d 	bl	8001008 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d902      	bls.n	8002d1e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8002d1c:	e005      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ef      	beq.n	8002d0a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000

08002d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e040      	b.n	8002de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd ff8c 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	@ 0x24
 8002d78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fb6a 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8af 	bl	8002efc <UART_SetConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e01b      	b.n	8002de0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fbe9 	bl	80035b0 <UART_CheckIdleState>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	@ 0x28
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d177      	bne.n	8002ef0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_Transmit+0x24>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e070      	b.n	8002ef2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2221      	movs	r2, #33	@ 0x21
 8002e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f8f3 	bl	8001008 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3c:	d108      	bne.n	8002e50 <HAL_UART_Transmit+0x68>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e003      	b.n	8002e58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e58:	e02f      	b.n	8002eba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fc4b 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e03b      	b.n	8002ef2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	3302      	adds	r3, #2
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e007      	b.n	8002ea8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1c9      	bne.n	8002e5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2140      	movs	r1, #64	@ 0x40
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fc15 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e005      	b.n	8002ef2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b08a      	sub	sp, #40	@ 0x28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4ba4      	ldr	r3, [pc, #656]	@ (80031bc <UART_SetConfig+0x2c0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a99      	ldr	r2, [pc, #612]	@ (80031c0 <UART_SetConfig+0x2c4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	4313      	orrs	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a90      	ldr	r2, [pc, #576]	@ (80031c4 <UART_SetConfig+0x2c8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d126      	bne.n	8002fd4 <UART_SetConfig+0xd8>
 8002f86:	4b90      	ldr	r3, [pc, #576]	@ (80031c8 <UART_SetConfig+0x2cc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d81b      	bhi.n	8002fcc <UART_SetConfig+0xd0>
 8002f94:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <UART_SetConfig+0xa0>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fbd 	.word	0x08002fbd
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fc5 	.word	0x08002fc5
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb2:	e116      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fba:	e112      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc2:	e10e      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fca:	e10a      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e106      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7c      	ldr	r2, [pc, #496]	@ (80031cc <UART_SetConfig+0x2d0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d138      	bne.n	8003050 <UART_SetConfig+0x154>
 8002fde:	4b7a      	ldr	r3, [pc, #488]	@ (80031c8 <UART_SetConfig+0x2cc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d82d      	bhi.n	8003048 <UART_SetConfig+0x14c>
 8002fec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <UART_SetConfig+0xf8>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	08003049 	.word	0x08003049
 8003000:	08003049 	.word	0x08003049
 8003004:	08003039 	.word	0x08003039
 8003008:	08003049 	.word	0x08003049
 800300c:	08003049 	.word	0x08003049
 8003010:	08003049 	.word	0x08003049
 8003014:	08003031 	.word	0x08003031
 8003018:	08003049 	.word	0x08003049
 800301c:	08003049 	.word	0x08003049
 8003020:	08003049 	.word	0x08003049
 8003024:	08003041 	.word	0x08003041
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e0d8      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003030:	2302      	movs	r3, #2
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e0d4      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003038:	2304      	movs	r3, #4
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e0d0      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003040:	2308      	movs	r3, #8
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e0cc      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e0c8      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5e      	ldr	r2, [pc, #376]	@ (80031d0 <UART_SetConfig+0x2d4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d125      	bne.n	80030a6 <UART_SetConfig+0x1aa>
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <UART_SetConfig+0x2cc>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003064:	2b30      	cmp	r3, #48	@ 0x30
 8003066:	d016      	beq.n	8003096 <UART_SetConfig+0x19a>
 8003068:	2b30      	cmp	r3, #48	@ 0x30
 800306a:	d818      	bhi.n	800309e <UART_SetConfig+0x1a2>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d00a      	beq.n	8003086 <UART_SetConfig+0x18a>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d814      	bhi.n	800309e <UART_SetConfig+0x1a2>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <UART_SetConfig+0x182>
 8003078:	2b10      	cmp	r3, #16
 800307a:	d008      	beq.n	800308e <UART_SetConfig+0x192>
 800307c:	e00f      	b.n	800309e <UART_SetConfig+0x1a2>
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003084:	e0ad      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003086:	2302      	movs	r3, #2
 8003088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308c:	e0a9      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800308e:	2304      	movs	r3, #4
 8003090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003094:	e0a5      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003096:	2308      	movs	r3, #8
 8003098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309c:	e0a1      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800309e:	2310      	movs	r3, #16
 80030a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a4:	e09d      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4a      	ldr	r2, [pc, #296]	@ (80031d4 <UART_SetConfig+0x2d8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d125      	bne.n	80030fc <UART_SetConfig+0x200>
 80030b0:	4b45      	ldr	r3, [pc, #276]	@ (80031c8 <UART_SetConfig+0x2cc>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80030bc:	d016      	beq.n	80030ec <UART_SetConfig+0x1f0>
 80030be:	2bc0      	cmp	r3, #192	@ 0xc0
 80030c0:	d818      	bhi.n	80030f4 <UART_SetConfig+0x1f8>
 80030c2:	2b80      	cmp	r3, #128	@ 0x80
 80030c4:	d00a      	beq.n	80030dc <UART_SetConfig+0x1e0>
 80030c6:	2b80      	cmp	r3, #128	@ 0x80
 80030c8:	d814      	bhi.n	80030f4 <UART_SetConfig+0x1f8>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <UART_SetConfig+0x1d8>
 80030ce:	2b40      	cmp	r3, #64	@ 0x40
 80030d0:	d008      	beq.n	80030e4 <UART_SetConfig+0x1e8>
 80030d2:	e00f      	b.n	80030f4 <UART_SetConfig+0x1f8>
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030da:	e082      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030dc:	2302      	movs	r3, #2
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e2:	e07e      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030e4:	2304      	movs	r3, #4
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ea:	e07a      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030ec:	2308      	movs	r3, #8
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f2:	e076      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030f4:	2310      	movs	r3, #16
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e072      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a35      	ldr	r2, [pc, #212]	@ (80031d8 <UART_SetConfig+0x2dc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12a      	bne.n	800315c <UART_SetConfig+0x260>
 8003106:	4b30      	ldr	r3, [pc, #192]	@ (80031c8 <UART_SetConfig+0x2cc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003114:	d01a      	beq.n	800314c <UART_SetConfig+0x250>
 8003116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800311a:	d81b      	bhi.n	8003154 <UART_SetConfig+0x258>
 800311c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003120:	d00c      	beq.n	800313c <UART_SetConfig+0x240>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003126:	d815      	bhi.n	8003154 <UART_SetConfig+0x258>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <UART_SetConfig+0x238>
 800312c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003130:	d008      	beq.n	8003144 <UART_SetConfig+0x248>
 8003132:	e00f      	b.n	8003154 <UART_SetConfig+0x258>
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e052      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800313c:	2302      	movs	r3, #2
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e04e      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003144:	2304      	movs	r3, #4
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e04a      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800314c:	2308      	movs	r3, #8
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003152:	e046      	b.n	80031e2 <UART_SetConfig+0x2e6>
 8003154:	2310      	movs	r3, #16
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315a:	e042      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <UART_SetConfig+0x2c4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d13a      	bne.n	80031dc <UART_SetConfig+0x2e0>
 8003166:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <UART_SetConfig+0x2cc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003174:	d01a      	beq.n	80031ac <UART_SetConfig+0x2b0>
 8003176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800317a:	d81b      	bhi.n	80031b4 <UART_SetConfig+0x2b8>
 800317c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003180:	d00c      	beq.n	800319c <UART_SetConfig+0x2a0>
 8003182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003186:	d815      	bhi.n	80031b4 <UART_SetConfig+0x2b8>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <UART_SetConfig+0x298>
 800318c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003190:	d008      	beq.n	80031a4 <UART_SetConfig+0x2a8>
 8003192:	e00f      	b.n	80031b4 <UART_SetConfig+0x2b8>
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e022      	b.n	80031e2 <UART_SetConfig+0x2e6>
 800319c:	2302      	movs	r3, #2
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e01e      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80031a4:	2304      	movs	r3, #4
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031aa:	e01a      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80031ac:	2308      	movs	r3, #8
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b2:	e016      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80031b4:	2310      	movs	r3, #16
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ba:	e012      	b.n	80031e2 <UART_SetConfig+0x2e6>
 80031bc:	efff69f3 	.word	0xefff69f3
 80031c0:	40008000 	.word	0x40008000
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40004400 	.word	0x40004400
 80031d0:	40004800 	.word	0x40004800
 80031d4:	40004c00 	.word	0x40004c00
 80031d8:	40005000 	.word	0x40005000
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a9f      	ldr	r2, [pc, #636]	@ (8003464 <UART_SetConfig+0x568>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d17a      	bne.n	80032e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d824      	bhi.n	800323e <UART_SetConfig+0x342>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <UART_SetConfig+0x300>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003221 	.word	0x08003221
 8003200:	0800323f 	.word	0x0800323f
 8003204:	08003229 	.word	0x08003229
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800322f 	.word	0x0800322f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	0800323f 	.word	0x0800323f
 8003218:	0800323f 	.word	0x0800323f
 800321c:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f83e 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 8003224:	61f8      	str	r0, [r7, #28]
        break;
 8003226:	e010      	b.n	800324a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b8f      	ldr	r3, [pc, #572]	@ (8003468 <UART_SetConfig+0x56c>)
 800322a:	61fb      	str	r3, [r7, #28]
        break;
 800322c:	e00d      	b.n	800324a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe ff9f 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 8003232:	61f8      	str	r0, [r7, #28]
        break;
 8003234:	e009      	b.n	800324a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323a:	61fb      	str	r3, [r7, #28]
        break;
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80fb 	beq.w	8003448 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	429a      	cmp	r2, r3
 8003260:	d305      	bcc.n	800326e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	429a      	cmp	r2, r3
 800326c:	d903      	bls.n	8003276 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003274:	e0e8      	b.n	8003448 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2200      	movs	r2, #0
 800327a:	461c      	mov	r4, r3
 800327c:	4615      	mov	r5, r2
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	022b      	lsls	r3, r5, #8
 8003288:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800328c:	0222      	lsls	r2, r4, #8
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	6849      	ldr	r1, [r1, #4]
 8003292:	0849      	lsrs	r1, r1, #1
 8003294:	2000      	movs	r0, #0
 8003296:	4688      	mov	r8, r1
 8003298:	4681      	mov	r9, r0
 800329a:	eb12 0a08 	adds.w	sl, r2, r8
 800329e:	eb43 0b09 	adc.w	fp, r3, r9
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b0:	4650      	mov	r0, sl
 80032b2:	4659      	mov	r1, fp
 80032b4:	f7fc ff9a 	bl	80001ec <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c6:	d308      	bcc.n	80032da <UART_SetConfig+0x3de>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ce:	d204      	bcs.n	80032da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	e0b6      	b.n	8003448 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032e0:	e0b2      	b.n	8003448 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ea:	d15e      	bne.n	80033aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d828      	bhi.n	8003346 <UART_SetConfig+0x44a>
 80032f4:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <UART_SetConfig+0x400>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003329 	.word	0x08003329
 8003304:	08003331 	.word	0x08003331
 8003308:	08003347 	.word	0x08003347
 800330c:	08003337 	.word	0x08003337
 8003310:	08003347 	.word	0x08003347
 8003314:	08003347 	.word	0x08003347
 8003318:	08003347 	.word	0x08003347
 800331c:	0800333f 	.word	0x0800333f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7fe ffbe 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 8003324:	61f8      	str	r0, [r7, #28]
        break;
 8003326:	e014      	b.n	8003352 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7fe ffd0 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 800332c:	61f8      	str	r0, [r7, #28]
        break;
 800332e:	e010      	b.n	8003352 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003330:	4b4d      	ldr	r3, [pc, #308]	@ (8003468 <UART_SetConfig+0x56c>)
 8003332:	61fb      	str	r3, [r7, #28]
        break;
 8003334:	e00d      	b.n	8003352 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7fe ff1b 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800333a:	61f8      	str	r0, [r7, #28]
        break;
 800333c:	e009      	b.n	8003352 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003342:	61fb      	str	r3, [r7, #28]
        break;
 8003344:	e005      	b.n	8003352 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d077      	beq.n	8003448 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005a      	lsls	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b0f      	cmp	r3, #15
 8003372:	d916      	bls.n	80033a2 <UART_SetConfig+0x4a6>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337a:	d212      	bcs.n	80033a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f023 030f 	bic.w	r3, r3, #15
 8003384:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	b29b      	uxth	r3, r3
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	b29a      	uxth	r2, r3
 8003392:	8afb      	ldrh	r3, [r7, #22]
 8003394:	4313      	orrs	r3, r2
 8003396:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	8afa      	ldrh	r2, [r7, #22]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e052      	b.n	8003448 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033a8:	e04e      	b.n	8003448 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d827      	bhi.n	8003402 <UART_SetConfig+0x506>
 80033b2:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <UART_SetConfig+0x4bc>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe ff60 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 80033e0:	61f8      	str	r0, [r7, #28]
        break;
 80033e2:	e014      	b.n	800340e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe ff72 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 80033e8:	61f8      	str	r0, [r7, #28]
        break;
 80033ea:	e010      	b.n	800340e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <UART_SetConfig+0x56c>)
 80033ee:	61fb      	str	r3, [r7, #28]
        break;
 80033f0:	e00d      	b.n	800340e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe febd 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80033f6:	61f8      	str	r0, [r7, #28]
        break;
 80033f8:	e009      	b.n	800340e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e005      	b.n	800340e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800340c:	bf00      	nop
    }

    if (pclk != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d019      	beq.n	8003448 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	085a      	lsrs	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d909      	bls.n	8003442 <UART_SetConfig+0x546>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d205      	bcs.n	8003442 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	e002      	b.n	8003448 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003454:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	@ 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003462:	bf00      	nop
 8003464:	40008000 	.word	0x40008000
 8003468:	00f42400 	.word	0x00f42400

0800346c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356a:	d10a      	bne.n	8003582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b098      	sub	sp, #96	@ 0x60
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c0:	f7fd fd22 	bl	8001008 <HAL_GetTick>
 80035c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d12e      	bne.n	8003632 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f88c 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d021      	beq.n	8003632 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360c:	647b      	str	r3, [r7, #68]	@ 0x44
 800360e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800361a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e6      	bne.n	80035ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e062      	b.n	80036f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d149      	bne.n	80036d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f856 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03c      	beq.n	80036d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	623b      	str	r3, [r7, #32]
   return(result);
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800366e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003678:	633b      	str	r3, [r7, #48]	@ 0x30
 800367a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800367e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e6      	bne.n	800365a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	60fb      	str	r3, [r7, #12]
   return(result);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3308      	adds	r3, #8
 80036aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ac:	61fa      	str	r2, [r7, #28]
 80036ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e5      	bne.n	800368c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e011      	b.n	80036f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3758      	adds	r7, #88	@ 0x58
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	e04f      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d04b      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fd fc75 	bl	8001008 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <UART_WaitOnFlagUntilTimeout+0x30>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e04e      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d037      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b80      	cmp	r3, #128	@ 0x80
 8003746:	d034      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b40      	cmp	r3, #64	@ 0x40
 800374c:	d031      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d110      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2208      	movs	r2, #8
 8003762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f838 	bl	80037da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2208      	movs	r2, #8
 800376e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e029      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378c:	d111      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f81e 	bl	80037da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d0a0      	beq.n	8003712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037da:	b480      	push	{r7}
 80037dc:	b095      	sub	sp, #84	@ 0x54
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003800:	643b      	str	r3, [r7, #64]	@ 0x40
 8003802:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e6      	bne.n	80037e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	61fb      	str	r3, [r7, #28]
   return(result);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	2b01      	cmp	r3, #1
 800384e:	d118      	bne.n	8003882 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	60bb      	str	r3, [r7, #8]
   return(result);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f023 0310 	bic.w	r3, r3, #16
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6979      	ldr	r1, [r7, #20]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	613b      	str	r3, [r7, #16]
   return(result);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e6      	bne.n	8003850 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003896:	bf00      	nop
 8003898:	3754      	adds	r7, #84	@ 0x54
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <memset>:
 80038a2:	4402      	add	r2, r0
 80038a4:	4603      	mov	r3, r0
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d100      	bne.n	80038ac <memset+0xa>
 80038aa:	4770      	bx	lr
 80038ac:	f803 1b01 	strb.w	r1, [r3], #1
 80038b0:	e7f9      	b.n	80038a6 <memset+0x4>
	...

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	4d0d      	ldr	r5, [pc, #52]	@ (80038ec <__libc_init_array+0x38>)
 80038b8:	4c0d      	ldr	r4, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	2600      	movs	r6, #0
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	4d0b      	ldr	r5, [pc, #44]	@ (80038f4 <__libc_init_array+0x40>)
 80038c6:	4c0c      	ldr	r4, [pc, #48]	@ (80038f8 <__libc_init_array+0x44>)
 80038c8:	f000 f818 	bl	80038fc <_init>
 80038cc:	1b64      	subs	r4, r4, r5
 80038ce:	10a4      	asrs	r4, r4, #2
 80038d0:	2600      	movs	r6, #0
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003964 	.word	0x08003964
 80038f0:	08003964 	.word	0x08003964
 80038f4:	08003964 	.word	0x08003964
 80038f8:	08003968 	.word	0x08003968

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
