
SteeringWheel2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000047e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080037fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080037fc  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ee  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b9  00000000  00000000  0000f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e8  00000000  00000000  000119e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273cf  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab6d  00000000  00000000  0003949f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f23ea  00000000  00000000  0004400c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001363f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002410  00000000  00000000  0013643c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013884c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003780 	.word	0x08003780

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003780 	.word	0x08003780

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  for(int i = 0; i<8; i++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e007      	b.n	80004f8 <main+0x1c>
	  lastButtonPressTime[i] = 0;
 80004e8:	4a25      	ldr	r2, [pc, #148]	@ (8000580 <main+0xa4>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i<8; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	ddf4      	ble.n	80004e8 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fc5c 	bl	8000dba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f847 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8eb 	bl	80006e0 <MX_GPIO_Init>
  MX_UART4_Init();
 800050a:	f000 f889 	bl	8000620 <MX_UART4_Init>
  MX_UART5_Init();
 800050e:	f000 f8b7 	bl	8000680 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  buttonStates = 0;
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <main+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 8000518:	2110      	movs	r1, #16
 800051a:	481b      	ldr	r0, [pc, #108]	@ (8000588 <main+0xac>)
 800051c:	f000 ffba 	bl	8001494 <HAL_GPIO_TogglePin>

	if(!HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin)){
 8000520:	2120      	movs	r1, #32
 8000522:	481a      	ldr	r0, [pc, #104]	@ (800058c <main+0xb0>)
 8000524:	f000 ff86 	bl	8001434 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d107      	bne.n	800053e <main+0x62>
		buttonStates |= 0b00100000;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <main+0xa8>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <main+0xa8>)
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e006      	b.n	800054c <main+0x70>
	}else{
		buttonStates &= 0b11011111;
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <main+0xa8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f023 0320 	bic.w	r3, r3, #32
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <main+0xa8>)
 800054a:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Transmit(&huart4, &buttonStates, 1, 1000) != HAL_OK){
 800054c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000550:	2201      	movs	r2, #1
 8000552:	490c      	ldr	r1, [pc, #48]	@ (8000584 <main+0xa8>)
 8000554:	480e      	ldr	r0, [pc, #56]	@ (8000590 <main+0xb4>)
 8000556:	f002 fb89 	bl	8002c6c <HAL_UART_Transmit>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <main+0x90>
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0xac>)
 8000566:	f000 ff7d 	bl	8001464 <HAL_GPIO_WritePin>
 800056a:	e004      	b.n	8000576 <main+0x9a>
	}
	else{
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0xac>)
 8000572:	f000 ff77 	bl	8001464 <HAL_GPIO_WritePin>
	}

	HAL_Delay(500);
 8000576:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057a:	f000 fc93 	bl	8000ea4 <HAL_Delay>
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 800057e:	e7cb      	b.n	8000518 <main+0x3c>
 8000580:	20000138 	.word	0x20000138
 8000584:	20000158 	.word	0x20000158
 8000588:	48000400 	.word	0x48000400
 800058c:	48000800 	.word	0x48000800
 8000590:	20000028 	.word	0x20000028

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	@ 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	@ 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f8bf 	bl	8003726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ba:	f000 ffab 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 fa82 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c8:	2310      	movs	r3, #16
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ffed 	bl	80015c0 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fa6e 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fbf3 	bl	8001df4 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000614:	f000 fa5a 	bl	8000acc <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	@ 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_UART4_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	@ (800067c <MX_UART4_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_UART4_Init+0x58>)
 800062c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_UART4_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_UART4_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_UART4_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_UART4_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <MX_UART4_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_UART4_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_UART4_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_UART4_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_UART4_Init+0x58>)
 8000664:	f002 fab4 	bl	8002bd0 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 fa2d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	40004c00 	.word	0x40004c00

08000680 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_UART5_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <MX_UART5_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_UART5_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_UART5_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_UART5_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006c4:	f002 fa84 	bl	8002bd0 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f9fd 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000b0 	.word	0x200000b0
 80006dc:	40005000 	.word	0x40005000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a69      	ldr	r2, [pc, #420]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b67      	ldr	r3, [pc, #412]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a63      	ldr	r2, [pc, #396]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b61      	ldr	r3, [pc, #388]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b5e      	ldr	r3, [pc, #376]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a5d      	ldr	r2, [pc, #372]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b5b      	ldr	r3, [pc, #364]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a57      	ldr	r2, [pc, #348]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b55      	ldr	r3, [pc, #340]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f000 fe81 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8000768:	484e      	ldr	r0, [pc, #312]	@ (80008a4 <MX_GPIO_Init+0x1c4>)
 800076a:	f000 fe7b 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 800076e:	2200      	movs	r2, #0
 8000770:	f24a 0135 	movw	r1, #41013	@ 0xa035
 8000774:	484c      	ldr	r0, [pc, #304]	@ (80008a8 <MX_GPIO_Init+0x1c8>)
 8000776:	f000 fe75 	bl	8001464 <HAL_GPIO_WritePin>
                          |OK_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON8_Pin BUTTON7_Pin */
  GPIO_InitStruct.Pin = BUTTON8_Pin|BUTTON7_Pin;
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fcbd 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON8_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON8_LED_Pin;
 8000796:	2340      	movs	r3, #64	@ 0x40
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON8_LED_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b0:	f000 fcae 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON7_LED_Pin BUTTON3_LED_Pin BUTTON4_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin;
 80007b4:	f44f 7324 	mov.w	r3, #656	@ 0x290
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4835      	ldr	r0, [pc, #212]	@ (80008a4 <MX_GPIO_Init+0x1c4>)
 80007ce:	f000 fc9f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON6_Pin;
 80007d2:	2320      	movs	r3, #32
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON6_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	482f      	ldr	r0, [pc, #188]	@ (80008a4 <MX_GPIO_Init+0x1c4>)
 80007e6:	f000 fc93 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON6_LED_Pin BUTTON5_LED_Pin BUTTON1_LED_Pin BUTTON2_LED_Pin
                           OK_LED_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 80007ea:	f24a 0335 	movw	r3, #41013	@ 0xa035
 80007ee:	617b      	str	r3, [r7, #20]
                          |OK_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4829      	ldr	r0, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0x1c8>)
 8000804:	f000 fc84 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON5_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin|BUTTON2_Pin;
 8000808:	f244 0302 	movw	r3, #16386	@ 0x4002
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0x1c8>)
 8000820:	f000 fc76 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8000824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	@ (80008a8 <MX_GPIO_Init+0x1c8>)
 800083c:	f000 fc68 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000840:	2340      	movs	r3, #64	@ 0x40
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000844:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <MX_GPIO_Init+0x1c4>)
 8000856:	f000 fc5b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 800085a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <MX_GPIO_Init+0x1c4>)
 8000872:	f000 fc4d 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2017      	movs	r0, #23
 800087c:	f000 fc11 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000880:	2017      	movs	r0, #23
 8000882:	f000 fc2a 	bl	80010da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f000 fc09 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	@ 0x28
 8000892:	f000 fc22 	bl	80010da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800
 80008a8:	48000400 	.word	0x48000400

080008ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime;

	if (GPIO_Pin == BUTTON1_Pin) {
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008bc:	d11a      	bne.n	80008f4 <HAL_GPIO_EXTI_Callback+0x48>
		currentTime = HAL_GetTick();
 80008be:	f000 fae5 	bl	8000e8c <HAL_GetTick>
 80008c2:	60f8      	str	r0, [r7, #12]

	    if ((currentTime - lastButtonPressTime[0]) > DEBOUNCE_THRESHOLD) {
 80008c4:	4b7d      	ldr	r3, [pc, #500]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b32      	cmp	r3, #50	@ 0x32
 80008ce:	d911      	bls.n	80008f4 <HAL_GPIO_EXTI_Callback+0x48>
	    	lastButtonPressTime[0] = currentTime;  // Update last press time
 80008d0:	4a7a      	ldr	r2, [pc, #488]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6013      	str	r3, [r2, #0]

	        if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET) {
 80008d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008da:	4879      	ldr	r0, [pc, #484]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x214>)
 80008dc:	f000 fdaa 	bl	8001434 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d106      	bne.n	80008f4 <HAL_GPIO_EXTI_Callback+0x48>
	                buttonStates ^= 0b00000001;
 80008e6:	4b77      	ldr	r3, [pc, #476]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b74      	ldr	r3, [pc, #464]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80008f2:	701a      	strb	r2, [r3, #0]

	        }
	    }
	}
	if (GPIO_Pin == BUTTON2_Pin) {
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008fa:	d11a      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x86>
		currentTime = HAL_GetTick();
 80008fc:	f000 fac6 	bl	8000e8c <HAL_GetTick>
 8000900:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[1]) > DEBOUNCE_THRESHOLD) {
 8000902:	4b6e      	ldr	r3, [pc, #440]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b32      	cmp	r3, #50	@ 0x32
 800090c:	d911      	bls.n	8000932 <HAL_GPIO_EXTI_Callback+0x86>
			lastButtonPressTime[1] = currentTime;  // Update last press time
 800090e:	4a6b      	ldr	r2, [pc, #428]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6053      	str	r3, [r2, #4]

		    if (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET) {
 8000914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000918:	4869      	ldr	r0, [pc, #420]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x214>)
 800091a:	f000 fd8b 	bl	8001434 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x86>
		    	buttonStates ^= 0b00000010;
 8000924:	4b67      	ldr	r3, [pc, #412]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f083 0302 	eor.w	r3, r3, #2
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b65      	ldr	r3, [pc, #404]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000930:	701a      	strb	r2, [r3, #0]

		    }
		}
	}

	if (GPIO_Pin == BUTTON3_Pin) { // hazards
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	2b40      	cmp	r3, #64	@ 0x40
 8000936:	d127      	bne.n	8000988 <HAL_GPIO_EXTI_Callback+0xdc>
		currentTime = HAL_GetTick();
 8000938:	f000 faa8 	bl	8000e8c <HAL_GetTick>
 800093c:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[2]) > DEBOUNCE_THRESHOLD) {
 800093e:	4b5f      	ldr	r3, [pc, #380]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b32      	cmp	r3, #50	@ 0x32
 8000948:	d91e      	bls.n	8000988 <HAL_GPIO_EXTI_Callback+0xdc>
			lastButtonPressTime[2] = currentTime;  // Update last press time
 800094a:	4a5c      	ldr	r2, [pc, #368]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6093      	str	r3, [r2, #8]

			if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_RESET) {
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	485d      	ldr	r0, [pc, #372]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000954:	f000 fd6e 	bl	8001434 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d114      	bne.n	8000988 <HAL_GPIO_EXTI_Callback+0xdc>
				buttonStates ^= 0b00000100;
 800095e:	4b59      	ldr	r3, [pc, #356]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0304 	eor.w	r3, r3, #4
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b56      	ldr	r3, [pc, #344]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 800096a:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11110111; // turn off left turn
 800096c:	4b55      	ldr	r3, [pc, #340]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f023 0308 	bic.w	r3, r3, #8
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b53      	ldr	r3, [pc, #332]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000978:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b01111111; // turn off right turn
 800097a:	4b52      	ldr	r3, [pc, #328]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000986:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (GPIO_Pin == BUTTON4_Pin) { // left turn
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800098e:	d128      	bne.n	80009e2 <HAL_GPIO_EXTI_Callback+0x136>
		currentTime = HAL_GetTick();
 8000990:	f000 fa7c 	bl	8000e8c <HAL_GetTick>
 8000994:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[3]) > DEBOUNCE_THRESHOLD) {
 8000996:	4b49      	ldr	r3, [pc, #292]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	2b32      	cmp	r3, #50	@ 0x32
 80009a0:	d91f      	bls.n	80009e2 <HAL_GPIO_EXTI_Callback+0x136>
			lastButtonPressTime[3] = currentTime;  // Update last press time
 80009a2:	4a46      	ldr	r2, [pc, #280]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	60d3      	str	r3, [r2, #12]

			if (HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) == GPIO_PIN_RESET) {
 80009a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ac:	4846      	ldr	r0, [pc, #280]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80009ae:	f000 fd41 	bl	8001434 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d114      	bne.n	80009e2 <HAL_GPIO_EXTI_Callback+0x136>
				buttonStates ^= 0b00001000;
 80009b8:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	f083 0308 	eor.w	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b40      	ldr	r3, [pc, #256]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009c4:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b01111111; // turn off right turn
 80009c6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009d2:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 80009d4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f023 0304 	bic.w	r3, r3, #4
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 80009e0:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	if (GPIO_Pin == BUTTON5_Pin) {
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d119      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0x170>
		currentTime = HAL_GetTick();
 80009e8:	f000 fa50 	bl	8000e8c <HAL_GetTick>
 80009ec:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[4]) > DEBOUNCE_THRESHOLD) {
 80009ee:	4b33      	ldr	r3, [pc, #204]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b32      	cmp	r3, #50	@ 0x32
 80009f8:	d910      	bls.n	8000a1c <HAL_GPIO_EXTI_Callback+0x170>
			lastButtonPressTime[4] = currentTime;  // Update last press time
 80009fa:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6113      	str	r3, [r2, #16]

			if (HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin) == GPIO_PIN_RESET) {
 8000a00:	2102      	movs	r1, #2
 8000a02:	482f      	ldr	r0, [pc, #188]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a04:	f000 fd16 	bl	8001434 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d106      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0x170>
				buttonStates ^= 0b00010000;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f083 0310 	eor.w	r3, r3, #16
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a1a:	701a      	strb	r2, [r3, #0]
		}
	}



	if (GPIO_Pin == BUTTON7_Pin) {
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2b80      	cmp	r3, #128	@ 0x80
 8000a20:	d11a      	bne.n	8000a58 <HAL_GPIO_EXTI_Callback+0x1ac>
		currentTime = HAL_GetTick();
 8000a22:	f000 fa33 	bl	8000e8c <HAL_GetTick>
 8000a26:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[6]) > DEBOUNCE_THRESHOLD) {
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b32      	cmp	r3, #50	@ 0x32
 8000a32:	d911      	bls.n	8000a58 <HAL_GPIO_EXTI_Callback+0x1ac>
			lastButtonPressTime[6] = currentTime;  // Update last press time
 8000a34:	4a21      	ldr	r2, [pc, #132]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6193      	str	r3, [r2, #24]

			if (HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin) == GPIO_PIN_RESET) {
 8000a3a:	2180      	movs	r1, #128	@ 0x80
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f000 fcf8 	bl	8001434 <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d106      	bne.n	8000a58 <HAL_GPIO_EXTI_Callback+0x1ac>
				buttonStates ^= 0b01000000;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a56:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	if (GPIO_Pin == BUTTON8_Pin) { // right turn
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	2b20      	cmp	r3, #32
 8000a5c:	d129      	bne.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x206>
		currentTime = HAL_GetTick();
 8000a5e:	f000 fa15 	bl	8000e8c <HAL_GetTick>
 8000a62:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[7]) > DEBOUNCE_THRESHOLD) {
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b32      	cmp	r3, #50	@ 0x32
 8000a6e:	d920      	bls.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x206>
			lastButtonPressTime[7] = currentTime;  // Update last press time
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x210>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	61d3      	str	r3, [r2, #28]

			if (HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin) == GPIO_PIN_RESET) {
 8000a76:	2120      	movs	r1, #32
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 fcda 	bl	8001434 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d115      	bne.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x206>
				buttonStates ^= 0b10000000;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a94:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b11110111; // turn of left turn
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f023 0308 	bic.w	r3, r3, #8
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000aa2:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f023 0304 	bic.w	r3, r3, #4
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x218>)
 8000ab0:	701a      	strb	r2, [r3, #0]





}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000138 	.word	0x20000138
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	20000158 	.word	0x20000158
 8000ac8:	48000800 	.word	0x48000800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0b0      	sub	sp, #192	@ 0xc0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	228c      	movs	r2, #140	@ 0x8c
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 fdf0 	bl	8003726 <memset>
  if(huart->Instance==UART4)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a53      	ldr	r2, [pc, #332]	@ (8000c98 <HAL_UART_MspInit+0x178>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13c      	bne.n	8000bca <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0320 	add.w	r3, r7, #32
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fb6d 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff ffb0 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b70:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b78:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b45      	ldr	r3, [pc, #276]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a44      	ldr	r2, [pc, #272]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bb6:	2308      	movs	r3, #8
 8000bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4837      	ldr	r0, [pc, #220]	@ (8000ca0 <HAL_UART_MspInit+0x180>)
 8000bc4:	f000 faa4 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000bc8:	e061      	b.n	8000c8e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==UART5)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a35      	ldr	r2, [pc, #212]	@ (8000ca4 <HAL_UART_MspInit+0x184>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d15c      	bne.n	8000c8e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fb2b 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000bec:	f7ff ff6e 	bl	8000acc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <HAL_UART_MspInit+0x17c>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c52:	2308      	movs	r3, #8
 8000c54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c60:	f000 fa56 	bl	8001110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c64:	2304      	movs	r3, #4
 8000c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <HAL_UART_MspInit+0x188>)
 8000c8a:	f000 fa41 	bl	8001110 <HAL_GPIO_Init>
}
 8000c8e:	bf00      	nop
 8000c90:	37c0      	adds	r7, #192	@ 0xc0
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40004c00 	.word	0x40004c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	40005000 	.word	0x40005000
 8000ca8:	48000c00 	.word	0x48000c00

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f8af 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_Pin);
 8000d0e:	2020      	movs	r0, #32
 8000d10:	f000 fbda 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_LED_Pin);
 8000d14:	2040      	movs	r0, #64	@ 0x40
 8000d16:	f000 fbd7 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON7_Pin);
 8000d1a:	2080      	movs	r0, #128	@ 0x80
 8000d1c:	f000 fbd4 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8000d20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d24:	f000 fbd0 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8000d30:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d34:	f000 fbc8 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8000d38:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d3c:	f000 fbc4 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d6c:	f7ff ffea 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 fccf 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9a:	f7ff fb9f 	bl	80004dc <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dac:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000db0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db4:	20000160 	.word	0x20000160

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>

08000dba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f961 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f80e 	bl	8000dec <HAL_InitTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	e001      	b.n	8000de0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ddc:	f7ff fe7c 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_InitTick+0x6c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d023      	beq.n	8000e48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e00:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_InitTick+0x70>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_InitTick+0x6c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f96d 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10f      	bne.n	8000e42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d809      	bhi.n	8000e3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f937 	bl	80010a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_InitTick+0x74>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e007      	b.n	8000e4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e004      	b.n	8000e4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	e001      	b.n	8000e4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	2000015c 	.word	0x2000015c

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000015c 	.word	0x2000015c

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e166      	b.n	80013ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8158 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b2 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b61      	ldr	r3, [pc, #388]	@ (800140c <HAL_GPIO_Init+0x2fc>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001288:	4a60      	ldr	r2, [pc, #384]	@ (800140c <HAL_GPIO_Init+0x2fc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001290:	4b5e      	ldr	r3, [pc, #376]	@ (800140c <HAL_GPIO_Init+0x2fc>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a5c      	ldr	r2, [pc, #368]	@ (8001410 <HAL_GPIO_Init+0x300>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012c6:	d02b      	beq.n	8001320 <HAL_GPIO_Init+0x210>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <HAL_GPIO_Init+0x304>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d025      	beq.n	800131c <HAL_GPIO_Init+0x20c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a51      	ldr	r2, [pc, #324]	@ (8001418 <HAL_GPIO_Init+0x308>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x208>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a50      	ldr	r2, [pc, #320]	@ (800141c <HAL_GPIO_Init+0x30c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001420 <HAL_GPIO_Init+0x310>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <HAL_GPIO_Init+0x314>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <HAL_GPIO_Init+0x318>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <HAL_GPIO_Init+0x31c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1f4>
 8001300:	2307      	movs	r3, #7
 8001302:	e00e      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001304:	2308      	movs	r3, #8
 8001306:	e00c      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001308:	2306      	movs	r3, #6
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800130c:	2305      	movs	r3, #5
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_GPIO_Init+0x300>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_GPIO_Init+0x320>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001364:	4a32      	ldr	r2, [pc, #200]	@ (8001430 <HAL_GPIO_Init+0x320>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136a:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <HAL_GPIO_Init+0x320>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138e:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <HAL_GPIO_Init+0x320>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001394:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_GPIO_Init+0x320>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <HAL_GPIO_Init+0x320>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_GPIO_Init+0x320>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <HAL_GPIO_Init+0x320>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae91 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	48001800 	.word	0x48001800
 800142c:	48001c00 	.word	0x48001c00
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43d9      	mvns	r1, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	400b      	ands	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f9e0 	bl	80008ac <HAL_GPIO_EXTI_Callback>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <HAL_PWREx_GetVoltageRange+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40007000 	.word	0x40007000

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001522:	d130      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800152c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001530:	d038      	beq.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153a:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2232      	movs	r2, #50	@ 0x32
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0c9b      	lsrs	r3, r3, #18
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	e002      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156c:	d102      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f2      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001580:	d110      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e00f      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001592:	d007      	beq.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800159c:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40007000 	.word	0x40007000
 80015b8:	20000000 	.word	0x20000000
 80015bc:	431bde83 	.word	0x431bde83

080015c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 bc08 	b.w	8001de4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d4:	4b96      	ldr	r3, [pc, #600]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015de:	4b94      	ldr	r3, [pc, #592]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80e4 	beq.w	80017be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_RCC_OscConfig+0x4c>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	f040 808b 	bne.w	800171a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b01      	cmp	r3, #1
 8001608:	f040 8087 	bne.w	800171a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160c:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x64>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e3df      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_RCC_OscConfig+0x7e>
 8001634:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800163c:	e005      	b.n	800164a <HAL_RCC_OscConfig+0x8a>
 800163e:	4b7c      	ldr	r3, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800164a:	4293      	cmp	r3, r2
 800164c:	d223      	bcs.n	8001696 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd92 	bl	800217c <RCC_SetFlashLatencyFromMSIRange>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e3c0      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001662:	4b73      	ldr	r3, [pc, #460]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a72      	ldr	r2, [pc, #456]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	496d      	ldr	r1, [pc, #436]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001680:	4b6b      	ldr	r3, [pc, #428]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	4968      	ldr	r1, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e025      	b.n	80016e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001696:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a65      	ldr	r2, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b63      	ldr	r3, [pc, #396]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4960      	ldr	r1, [pc, #384]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	495b      	ldr	r1, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fd52 	bl	800217c <RCC_SetFlashLatencyFromMSIRange>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e380      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e2:	f000 fc87 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4950      	ldr	r1, [pc, #320]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001838 <HAL_RCC_OscConfig+0x278>)
 8001700:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001702:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb70 	bl	8000dec <HAL_InitTick>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d052      	beq.n	80017bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	e364      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d032      	beq.n	8001788 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001722:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a42      	ldr	r2, [pc, #264]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172e:	f7ff fbad 	bl	8000e8c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001736:	f7ff fba9 	bl	8000e8c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e34d      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001748:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001754:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a35      	ldr	r2, [pc, #212]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4930      	ldr	r1, [pc, #192]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001772:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	492b      	ldr	r1, [pc, #172]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
 8001786:	e01a      	b.n	80017be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb7a 	bl	8000e8c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179c:	f7ff fb76 	bl	8000e8c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e31a      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1dc>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d073      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x21c>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d10e      	bne.n	80017f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d063      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d15f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e2f7      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x24c>
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e025      	b.n	8001858 <HAL_RCC_OscConfig+0x298>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d114      	bne.n	8001840 <HAL_RCC_OscConfig+0x280>
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a02      	ldr	r2, [pc, #8]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x298>
 8001830:	40021000 	.word	0x40021000
 8001834:	08003798 	.word	0x08003798
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004
 8001840:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a9f      	ldr	r2, [pc, #636]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a9c      	ldr	r2, [pc, #624]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb14 	bl	8000e8c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb10 	bl	8000e8c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e2b4      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4b92      	ldr	r3, [pc, #584]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x2a8>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb00 	bl	8000e8c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fafc 	bl	8000e8c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2a0      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	4b88      	ldr	r3, [pc, #544]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x2d0>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d060      	beq.n	8001980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x310>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x328>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e27d      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	4973      	ldr	r1, [pc, #460]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	e040      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d023      	beq.n	800194e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fabb 	bl	8000e8c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fab7 	bl	8000e8c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e25b      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b65      	ldr	r3, [pc, #404]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b62      	ldr	r3, [pc, #392]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	495f      	ldr	r1, [pc, #380]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fa97 	bl	8000e8c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fa93 	bl	8000e8c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e237      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001994:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fa72 	bl	8000e8c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fa6e 	bl	8000e8c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e212      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x3ec>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fa55 	bl	8000e8c <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fa51 	bl	8000e8c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1f5      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f8:	4b32      	ldr	r3, [pc, #200]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ef      	bne.n	80019e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a6 	beq.w	8001b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10d      	bne.n	8001a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a28:	4a26      	ldr	r2, [pc, #152]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_RCC_OscConfig+0x508>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d118      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCC_OscConfig+0x508>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x508>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fa18 	bl	8000e8c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f7ff fa14 	bl	8000e8c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1b8      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_RCC_OscConfig+0x508>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4d8>
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a96:	e029      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d115      	bne.n	8001acc <HAL_RCC_OscConfig+0x50c>
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa6:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	4a03      	ldr	r2, [pc, #12]	@ (8001ac4 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac0:	e014      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	4b9d      	ldr	r3, [pc, #628]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad2:	4a9c      	ldr	r2, [pc, #624]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001adc:	4b99      	ldr	r3, [pc, #612]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae2:	4a98      	ldr	r2, [pc, #608]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d016      	beq.n	8001b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f9ca 	bl	8000e8c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff f9c6 	bl	8000e8c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e168      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b12:	4b8c      	ldr	r3, [pc, #560]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ed      	beq.n	8001afc <HAL_RCC_OscConfig+0x53c>
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f9b3 	bl	8000e8c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f9af 	bl	8000e8c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e151      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b40:	4b80      	ldr	r3, [pc, #512]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ed      	bne.n	8001b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b7b      	ldr	r3, [pc, #492]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a7a      	ldr	r2, [pc, #488]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01c      	beq.n	8001bae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b74:	4b73      	ldr	r3, [pc, #460]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b7a:	4a72      	ldr	r2, [pc, #456]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f982 	bl	8000e8c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b8c:	f7ff f97e 	bl	8000e8c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e122      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9e:	4b69      	ldr	r3, [pc, #420]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x5cc>
 8001bac:	e01b      	b.n	8001be6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bae:	4b65      	ldr	r3, [pc, #404]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bb4:	4a63      	ldr	r2, [pc, #396]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f965 	bl	8000e8c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc6:	f7ff f961 	bl	8000e8c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e105      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80f9 	beq.w	8001de2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	f040 80cf 	bne.w	8001d98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bfa:	4b52      	ldr	r3, [pc, #328]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d12c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d123      	bne.n	8001c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d11b      	bne.n	8001c68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d113      	bne.n	8001c68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	3b01      	subs	r3, #1
 8001c62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d071      	beq.n	8001d4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d068      	beq.n	8001d40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c6e:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c7a:	4b32      	ldr	r3, [pc, #200]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0ac      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001c90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c96:	f7ff f8f9 	bl	8000e8c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f8f5 	bl	8000e8c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e099      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <HAL_RCC_OscConfig+0x788>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cd6:	0212      	lsls	r2, r2, #8
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cde:	0852      	lsrs	r2, r2, #1
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	0552      	lsls	r2, r2, #21
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cea:	0852      	lsrs	r2, r2, #1
 8001cec:	3a01      	subs	r2, #1
 8001cee:	0652      	lsls	r2, r2, #25
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cf6:	06d2      	lsls	r2, r2, #27
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	4912      	ldr	r1, [pc, #72]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0f      	ldr	r2, [pc, #60]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d18:	f7ff f8b8 	bl	8000e8c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f8b4 	bl	8000e8c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e058      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <HAL_RCC_OscConfig+0x784>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3e:	e050      	b.n	8001de2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e04f      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4c:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d144      	bne.n	8001de2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d58:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d70:	f7ff f88c 	bl	8000e8c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff f888 	bl	8000e8c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e02c      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x7b8>
 8001d96:	e024      	b.n	8001de2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d01f      	beq.n	8001dde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f86f 	bl	8000e8c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f86b 	bl	8000e8c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4905      	ldr	r1, [pc, #20]	@ (8001dec <HAL_RCC_OscConfig+0x82c>)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x830>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
 8001ddc:	e001      	b.n	8001de2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	feeefffc 	.word	0xfeeefffc

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0e7      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b72      	ldr	r3, [pc, #456]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4970      	ldr	r1, [pc, #448]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0cf      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b63      	ldr	r3, [pc, #396]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4960      	ldr	r1, [pc, #384]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d04c      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d121      	bne.n	8001eca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0a6      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e92:	4b54      	ldr	r3, [pc, #336]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e09a      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e08e      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eba:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e086      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b46      	ldr	r3, [pc, #280]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4943      	ldr	r1, [pc, #268]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001edc:	f7fe ffd6 	bl	8000e8c <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7fe ffd2 	bl	8000e8c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e06e      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d208      	bcs.n	8001f3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	492b      	ldr	r1, [pc, #172]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3a:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d210      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f48:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 0207 	bic.w	r2, r3, #7
 8001f50:	4923      	ldr	r1, [pc, #140]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e036      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4918      	ldr	r1, [pc, #96]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4910      	ldr	r1, [pc, #64]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa8:	f000 f824 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	490b      	ldr	r1, [pc, #44]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe ff0d 	bl	8000dec <HAL_InitTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08003798 	.word	0x08003798
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002002:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200c:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x34>
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d121      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d11e      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002028:	4b34      	ldr	r3, [pc, #208]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e005      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002044:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002050:	4a2b      	ldr	r2, [pc, #172]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10d      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002064:	e00a      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d102      	bne.n	8002072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800206c:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x110>)
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	e004      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d101      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x114>)
 800207a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d134      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0xa6>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d003      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002098:	e005      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x110>)
 800209c:	617b      	str	r3, [r7, #20]
      break;
 800209e:	e005      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x114>)
 80020a2:	617b      	str	r3, [r7, #20]
      break;
 80020a4:	e002      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	617b      	str	r3, [r7, #20]
      break;
 80020aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	3301      	adds	r3, #1
 80020b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	fb03 f202 	mul.w	r2, r3, r2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x108>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	0e5b      	lsrs	r3, r3, #25
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	3301      	adds	r3, #1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020ec:	69bb      	ldr	r3, [r7, #24]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	080037b0 	.word	0x080037b0
 8002104:	00f42400 	.word	0x00f42400
 8002108:	007a1200 	.word	0x007a1200

0800210c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002128:	f7ff fff0 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4904      	ldr	r1, [pc, #16]	@ (800214c <HAL_RCC_GetPCLK1Freq+0x28>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	080037a8 	.word	0x080037a8

08002150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002154:	f7ff ffda 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	0adb      	lsrs	r3, r3, #11
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4904      	ldr	r1, [pc, #16]	@ (8002178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	080037a8 	.word	0x080037a8

0800217c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002194:	f7ff f9b0 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 8002198:	6178      	str	r0, [r7, #20]
 800219a:	e014      	b.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	4a24      	ldr	r2, [pc, #144]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b4:	f7ff f9a0 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 80021b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021cc:	d10b      	bne.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b80      	cmp	r3, #128	@ 0x80
 80021d2:	d919      	bls.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80021d8:	d902      	bls.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021da:	2302      	movs	r3, #2
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e013      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e0:	2301      	movs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e010      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	@ 0x80
 80021ea:	d902      	bls.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021ec:	2303      	movs	r3, #3
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e00a      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b80      	cmp	r3, #128	@ 0x80
 80021f6:	d102      	bne.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f8:	2302      	movs	r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e004      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b70      	cmp	r3, #112	@ 0x70
 8002202:	d101      	bne.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 0207 	bic.w	r2, r3, #7
 8002210:	4909      	ldr	r1, [pc, #36]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40022000 	.word	0x40022000

0800223c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002244:	2300      	movs	r3, #0
 8002246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002248:	2300      	movs	r3, #0
 800224a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002254:	2b00      	cmp	r3, #0
 8002256:	d041      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800225c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002260:	d02a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002262:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002266:	d824      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800226e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002272:	d81e      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800227c:	d010      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800227e:	e018      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002280:	4b86      	ldr	r3, [pc, #536]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a85      	ldr	r2, [pc, #532]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800228c:	e015      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3304      	adds	r3, #4
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f000 facd 	bl	8002834 <RCCEx_PLLSAI1_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800229e:	e00c      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3320      	adds	r3, #32
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fbb6 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b0:	e003      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	74fb      	strb	r3, [r7, #19]
      break;
 80022b6:	e000      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c0:	4b76      	ldr	r3, [pc, #472]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ce:	4973      	ldr	r1, [pc, #460]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022d6:	e001      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d041      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022f0:	d02a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022f6:	d824      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022fc:	d008      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002302:	d81e      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d010      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800230e:	e018      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002310:	4b62      	ldr	r3, [pc, #392]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a61      	ldr	r2, [pc, #388]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800231c:	e015      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fa85 	bl	8002834 <RCCEx_PLLSAI1_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232e:	e00c      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3320      	adds	r3, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fb6e 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002340:	e003      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	74fb      	strb	r3, [r7, #19]
      break;
 8002346:	e000      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002350:	4b52      	ldr	r3, [pc, #328]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235e:	494f      	ldr	r1, [pc, #316]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a0 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800237e:	4b47      	ldr	r3, [pc, #284]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	4a40      	ldr	r2, [pc, #256]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a0:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b0:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3a      	ldr	r2, [pc, #232]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fd66 	bl	8000e8c <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c2:	e009      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe fd62 	bl	8000e8c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d902      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	74fb      	strb	r3, [r7, #19]
        break;
 80023d6:	e005      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d8:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d15c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ea:	4b2c      	ldr	r3, [pc, #176]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d019      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002408:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002414:	4b21      	ldr	r3, [pc, #132]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241a:	4a20      	ldr	r2, [pc, #128]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002424:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242a:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fd21 	bl	8000e8c <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244c:	e00b      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fd1d 	bl	8000e8c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d902      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	74fb      	strb	r3, [r7, #19]
            break;
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ec      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	4904      	ldr	r1, [pc, #16]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002492:	e009      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
 8002498:	e006      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a8:	7c7b      	ldrb	r3, [r7, #17]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	4aa5      	ldr	r2, [pc, #660]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	499c      	ldr	r1, [pc, #624]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e8:	4b97      	ldr	r3, [pc, #604]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	f023 020c 	bic.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	4994      	ldr	r1, [pc, #592]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250a:	4b8f      	ldr	r3, [pc, #572]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	498b      	ldr	r1, [pc, #556]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252c:	4b86      	ldr	r3, [pc, #536]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4983      	ldr	r1, [pc, #524]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254e:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255c:	497a      	ldr	r1, [pc, #488]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002570:	4b75      	ldr	r3, [pc, #468]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	4972      	ldr	r1, [pc, #456]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a0:	4969      	ldr	r1, [pc, #420]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b4:	4b64      	ldr	r3, [pc, #400]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025c2:	4961      	ldr	r1, [pc, #388]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e4:	4958      	ldr	r1, [pc, #352]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f8:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	4950      	ldr	r1, [pc, #320]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261a:	4b4b      	ldr	r3, [pc, #300]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	4947      	ldr	r1, [pc, #284]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800263c:	4b42      	ldr	r3, [pc, #264]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	493f      	ldr	r1, [pc, #252]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800265e:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4936      	ldr	r1, [pc, #216]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267c:	d106      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002688:	60d3      	str	r3, [r2, #12]
 800268a:	e011      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f8c9 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d028      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026bc:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ca:	491f      	ldr	r1, [pc, #124]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026da:	d106      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
 80026e8:	e011      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f2:	d10c      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f89a 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002720:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002728:	4907      	ldr	r1, [pc, #28]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002738:	d108      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273a:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4a02      	ldr	r2, [pc, #8]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002744:	60d3      	str	r3, [r2, #12]
 8002746:	e013      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002754:	d10c      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f869 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d02f      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800277c:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800278a:	4929      	ldr	r1, [pc, #164]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800279a:	d10d      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f846 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d014      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	74bb      	strb	r3, [r7, #18]
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3320      	adds	r3, #32
 80027c6:	2102      	movs	r1, #2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f925 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f8:	490d      	ldr	r1, [pc, #52]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281c:	4904      	ldr	r1, [pc, #16]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002824:	7cbb      	ldrb	r3, [r7, #18]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002842:	4b74      	ldr	r3, [pc, #464]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800284e:	4b71      	ldr	r3, [pc, #452]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
       ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002866:	4b6b      	ldr	r3, [pc, #428]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
       ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d047      	beq.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e044      	b.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d018      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x86>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d825      	bhi.n	80028d8 <RCCEx_PLLSAI1_Config+0xa4>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <RCCEx_PLLSAI1_Config+0x62>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d009      	beq.n	80028a8 <RCCEx_PLLSAI1_Config+0x74>
 8002894:	e020      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11d      	bne.n	80028de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e01a      	b.n	80028de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e013      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ba:	4b56      	ldr	r3, [pc, #344]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c6:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d6:	e006      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e004      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	430b      	orrs	r3, r1
 8002904:	4943      	ldr	r1, [pc, #268]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d17c      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002910:	4b40      	ldr	r3, [pc, #256]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3f      	ldr	r2, [pc, #252]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fab6 	bl	8000e8c <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002922:	e009      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002924:	f7fe fab2 	bl	8000e8c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	73fb      	strb	r3, [r7, #15]
        break;
 8002936:	e005      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002938:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ef      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15f      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d110      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002950:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002958:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	06d2      	lsls	r2, r2, #27
 8002968:	430a      	orrs	r2, r1
 800296a:	492a      	ldr	r1, [pc, #168]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	610b      	str	r3, [r1, #16]
 8002970:	e027      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d112      	bne.n	800299e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002980:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6892      	ldr	r2, [r2, #8]
 8002988:	0211      	lsls	r1, r2, #8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6912      	ldr	r2, [r2, #16]
 800298e:	0852      	lsrs	r2, r2, #1
 8002990:	3a01      	subs	r2, #1
 8002992:	0552      	lsls	r2, r2, #21
 8002994:	430a      	orrs	r2, r1
 8002996:	491f      	ldr	r1, [pc, #124]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	610b      	str	r3, [r1, #16]
 800299c:	e011      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800299e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6892      	ldr	r2, [r2, #8]
 80029ae:	0211      	lsls	r1, r2, #8
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6952      	ldr	r2, [r2, #20]
 80029b4:	0852      	lsrs	r2, r2, #1
 80029b6:	3a01      	subs	r2, #1
 80029b8:	0652      	lsls	r2, r2, #25
 80029ba:	430a      	orrs	r2, r1
 80029bc:	4915      	ldr	r1, [pc, #84]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a13      	ldr	r2, [pc, #76]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fa5d 	bl	8000e8c <HAL_GetTick>
 80029d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d4:	e009      	b.n	80029ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d6:	f7fe fa59 	bl	8000e8c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	73fb      	strb	r3, [r7, #15]
          break;
 80029e8:	e005      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ef      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a26:	4b69      	ldr	r3, [pc, #420]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a32:	4b66      	ldr	r3, [pc, #408]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10d      	bne.n	8002a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
       ||
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a4a:	4b60      	ldr	r3, [pc, #384]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
       ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d047      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e044      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d018      	beq.n	8002a9e <RCCEx_PLLSAI2_Config+0x86>
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d825      	bhi.n	8002abc <RCCEx_PLLSAI2_Config+0xa4>
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d002      	beq.n	8002a7a <RCCEx_PLLSAI2_Config+0x62>
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d009      	beq.n	8002a8c <RCCEx_PLLSAI2_Config+0x74>
 8002a78:	e020      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a7a:	4b54      	ldr	r3, [pc, #336]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11d      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8a:	e01a      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e013      	b.n	8002ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aaa:	4b48      	ldr	r3, [pc, #288]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aba:	e006      	b.n	8002aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e004      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	4938      	ldr	r1, [pc, #224]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d166      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002af4:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b00:	f7fe f9c4 	bl	8000e8c <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b06:	e009      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b08:	f7fe f9c0 	bl	8000e8c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d902      	bls.n	8002b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	73fb      	strb	r3, [r7, #15]
        break;
 8002b1a:	e005      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ef      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d149      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d110      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002b3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68d2      	ldr	r2, [r2, #12]
 8002b4a:	06d2      	lsls	r2, r2, #27
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	491f      	ldr	r1, [pc, #124]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	614b      	str	r3, [r1, #20]
 8002b54:	e011      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	0211      	lsls	r1, r2, #8
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6912      	ldr	r2, [r2, #16]
 8002b6c:	0852      	lsrs	r2, r2, #1
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0652      	lsls	r2, r2, #25
 8002b72:	430a      	orrs	r2, r1
 8002b74:	4915      	ldr	r1, [pc, #84]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe f981 	bl	8000e8c <HAL_GetTick>
 8002b8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b8e:	f7fe f97d 	bl	8000e8c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba0:	e005      	b.n	8002bae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ef      	beq.n	8002b8e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4903      	ldr	r1, [pc, #12]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e040      	b.n	8002c64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff94 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	@ 0x24
 8002bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fb6a 	bl	80032f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8af 	bl	8002d80 <UART_SetConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e01b      	b.n	8002c64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fbe9 	bl	8003434 <UART_CheckIdleState>
 8002c62:	4603      	mov	r3, r0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d177      	bne.n	8002d74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_UART_Transmit+0x24>
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e070      	b.n	8002d76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2221      	movs	r2, #33	@ 0x21
 8002ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe f8f3 	bl	8000e8c <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc0:	d108      	bne.n	8002cd4 <HAL_UART_Transmit+0x68>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e003      	b.n	8002cdc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cdc:	e02f      	b.n	8002d3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	@ 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fc4b 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e03b      	b.n	8002d76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	b292      	uxth	r2, r2
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	3302      	adds	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e007      	b.n	8002d2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1c9      	bne.n	8002cde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2140      	movs	r1, #64	@ 0x40
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fc15 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e005      	b.n	8002d76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b08a      	sub	sp, #40	@ 0x28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4ba4      	ldr	r3, [pc, #656]	@ (8003040 <UART_SetConfig+0x2c0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a99      	ldr	r2, [pc, #612]	@ (8003044 <UART_SetConfig+0x2c4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	4313      	orrs	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a90      	ldr	r2, [pc, #576]	@ (8003048 <UART_SetConfig+0x2c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d126      	bne.n	8002e58 <UART_SetConfig+0xd8>
 8002e0a:	4b90      	ldr	r3, [pc, #576]	@ (800304c <UART_SetConfig+0x2cc>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d81b      	bhi.n	8002e50 <UART_SetConfig+0xd0>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <UART_SetConfig+0xa0>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e41 	.word	0x08002e41
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e49 	.word	0x08002e49
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e116      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e112      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e40:	2304      	movs	r3, #4
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e46:	e10e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e48:	2308      	movs	r3, #8
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4e:	e10a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e50:	2310      	movs	r3, #16
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e106      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <UART_SetConfig+0x2d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d138      	bne.n	8002ed4 <UART_SetConfig+0x154>
 8002e62:	4b7a      	ldr	r3, [pc, #488]	@ (800304c <UART_SetConfig+0x2cc>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d82d      	bhi.n	8002ecc <UART_SetConfig+0x14c>
 8002e70:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <UART_SetConfig+0xf8>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002ecd 	.word	0x08002ecd
 8002e80:	08002ecd 	.word	0x08002ecd
 8002e84:	08002ecd 	.word	0x08002ecd
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002ecd 	.word	0x08002ecd
 8002e94:	08002ecd 	.word	0x08002ecd
 8002e98:	08002eb5 	.word	0x08002eb5
 8002e9c:	08002ecd 	.word	0x08002ecd
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0d8      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e0d4      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	e0d0      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eca:	e0cc      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed2:	e0c8      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8003054 <UART_SetConfig+0x2d4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d125      	bne.n	8002f2a <UART_SetConfig+0x1aa>
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <UART_SetConfig+0x2cc>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ee8:	2b30      	cmp	r3, #48	@ 0x30
 8002eea:	d016      	beq.n	8002f1a <UART_SetConfig+0x19a>
 8002eec:	2b30      	cmp	r3, #48	@ 0x30
 8002eee:	d818      	bhi.n	8002f22 <UART_SetConfig+0x1a2>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d00a      	beq.n	8002f0a <UART_SetConfig+0x18a>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d814      	bhi.n	8002f22 <UART_SetConfig+0x1a2>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <UART_SetConfig+0x182>
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d008      	beq.n	8002f12 <UART_SetConfig+0x192>
 8002f00:	e00f      	b.n	8002f22 <UART_SetConfig+0x1a2>
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e0ad      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f10:	e0a9      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f12:	2304      	movs	r3, #4
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f18:	e0a5      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f20:	e0a1      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f22:	2310      	movs	r3, #16
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f28:	e09d      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003058 <UART_SetConfig+0x2d8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d125      	bne.n	8002f80 <UART_SetConfig+0x200>
 8002f34:	4b45      	ldr	r3, [pc, #276]	@ (800304c <UART_SetConfig+0x2cc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f40:	d016      	beq.n	8002f70 <UART_SetConfig+0x1f0>
 8002f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f44:	d818      	bhi.n	8002f78 <UART_SetConfig+0x1f8>
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d00a      	beq.n	8002f60 <UART_SetConfig+0x1e0>
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1f8>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <UART_SetConfig+0x1d8>
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d008      	beq.n	8002f68 <UART_SetConfig+0x1e8>
 8002f56:	e00f      	b.n	8002f78 <UART_SetConfig+0x1f8>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e082      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f66:	e07e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6e:	e07a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e076      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e072      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a35      	ldr	r2, [pc, #212]	@ (800305c <UART_SetConfig+0x2dc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12a      	bne.n	8002fe0 <UART_SetConfig+0x260>
 8002f8a:	4b30      	ldr	r3, [pc, #192]	@ (800304c <UART_SetConfig+0x2cc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f98:	d01a      	beq.n	8002fd0 <UART_SetConfig+0x250>
 8002f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f9e:	d81b      	bhi.n	8002fd8 <UART_SetConfig+0x258>
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa4:	d00c      	beq.n	8002fc0 <UART_SetConfig+0x240>
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002faa:	d815      	bhi.n	8002fd8 <UART_SetConfig+0x258>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <UART_SetConfig+0x238>
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d008      	beq.n	8002fc8 <UART_SetConfig+0x248>
 8002fb6:	e00f      	b.n	8002fd8 <UART_SetConfig+0x258>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e052      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e04e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e04a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e046      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e042      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <UART_SetConfig+0x2c4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d13a      	bne.n	8003060 <UART_SetConfig+0x2e0>
 8002fea:	4b18      	ldr	r3, [pc, #96]	@ (800304c <UART_SetConfig+0x2cc>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ff8:	d01a      	beq.n	8003030 <UART_SetConfig+0x2b0>
 8002ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ffe:	d81b      	bhi.n	8003038 <UART_SetConfig+0x2b8>
 8003000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003004:	d00c      	beq.n	8003020 <UART_SetConfig+0x2a0>
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800300a:	d815      	bhi.n	8003038 <UART_SetConfig+0x2b8>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <UART_SetConfig+0x298>
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003014:	d008      	beq.n	8003028 <UART_SetConfig+0x2a8>
 8003016:	e00f      	b.n	8003038 <UART_SetConfig+0x2b8>
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e022      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e01e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e01a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e016      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e012      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003040:	efff69f3 	.word	0xefff69f3
 8003044:	40008000 	.word	0x40008000
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	40004400 	.word	0x40004400
 8003054:	40004800 	.word	0x40004800
 8003058:	40004c00 	.word	0x40004c00
 800305c:	40005000 	.word	0x40005000
 8003060:	2310      	movs	r3, #16
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a9f      	ldr	r2, [pc, #636]	@ (80032e8 <UART_SetConfig+0x568>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d17a      	bne.n	8003166 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003074:	2b08      	cmp	r3, #8
 8003076:	d824      	bhi.n	80030c2 <UART_SetConfig+0x342>
 8003078:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <UART_SetConfig+0x300>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030c3 	.word	0x080030c3
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030c3 	.word	0x080030c3
 8003090:	080030b3 	.word	0x080030b3
 8003094:	080030c3 	.word	0x080030c3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030c3 	.word	0x080030c3
 80030a0:	080030bb 	.word	0x080030bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7ff f83e 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 80030a8:	61f8      	str	r0, [r7, #28]
        break;
 80030aa:	e010      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ac:	4b8f      	ldr	r3, [pc, #572]	@ (80032ec <UART_SetConfig+0x56c>)
 80030ae:	61fb      	str	r3, [r7, #28]
        break;
 80030b0:	e00d      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b2:	f7fe ff9f 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 80030b6:	61f8      	str	r0, [r7, #28]
        break;
 80030b8:	e009      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e005      	b.n	80030ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80fb 	beq.w	80032cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d903      	bls.n	80030fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030f8:	e0e8      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2200      	movs	r2, #0
 80030fe:	461c      	mov	r4, r3
 8003100:	4615      	mov	r5, r2
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	022b      	lsls	r3, r5, #8
 800310c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003110:	0222      	lsls	r2, r4, #8
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	6849      	ldr	r1, [r1, #4]
 8003116:	0849      	lsrs	r1, r1, #1
 8003118:	2000      	movs	r0, #0
 800311a:	4688      	mov	r8, r1
 800311c:	4681      	mov	r9, r0
 800311e:	eb12 0a08 	adds.w	sl, r2, r8
 8003122:	eb43 0b09 	adc.w	fp, r3, r9
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003134:	4650      	mov	r0, sl
 8003136:	4659      	mov	r1, fp
 8003138:	f7fd f858 	bl	80001ec <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800314a:	d308      	bcc.n	800315e <UART_SetConfig+0x3de>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003152:	d204      	bcs.n	800315e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e0b6      	b.n	80032cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003164:	e0b2      	b.n	80032cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316e:	d15e      	bne.n	800322e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003174:	2b08      	cmp	r3, #8
 8003176:	d828      	bhi.n	80031ca <UART_SetConfig+0x44a>
 8003178:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <UART_SetConfig+0x400>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031bb 	.word	0x080031bb
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031cb 	.word	0x080031cb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a4:	f7fe ffbe 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 80031a8:	61f8      	str	r0, [r7, #28]
        break;
 80031aa:	e014      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7fe ffd0 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 80031b0:	61f8      	str	r0, [r7, #28]
        break;
 80031b2:	e010      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <UART_SetConfig+0x56c>)
 80031b6:	61fb      	str	r3, [r7, #28]
        break;
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe ff1b 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 80031be:	61f8      	str	r0, [r7, #28]
        break;
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c6:	61fb      	str	r3, [r7, #28]
        break;
 80031c8:	e005      	b.n	80031d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d077      	beq.n	80032cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005a      	lsls	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d916      	bls.n	8003226 <UART_SetConfig+0x4a6>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fe:	d212      	bcs.n	8003226 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f023 030f 	bic.w	r3, r3, #15
 8003208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	b29a      	uxth	r2, r3
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	4313      	orrs	r3, r2
 800321a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	8afa      	ldrh	r2, [r7, #22]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e052      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800322c:	e04e      	b.n	80032cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003232:	2b08      	cmp	r3, #8
 8003234:	d827      	bhi.n	8003286 <UART_SetConfig+0x506>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x4bc>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003261 	.word	0x08003261
 8003240:	08003269 	.word	0x08003269
 8003244:	08003271 	.word	0x08003271
 8003248:	08003287 	.word	0x08003287
 800324c:	08003277 	.word	0x08003277
 8003250:	08003287 	.word	0x08003287
 8003254:	08003287 	.word	0x08003287
 8003258:	08003287 	.word	0x08003287
 800325c:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7fe ff60 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8003264:	61f8      	str	r0, [r7, #28]
        break;
 8003266:	e014      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe ff72 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 800326c:	61f8      	str	r0, [r7, #28]
        break;
 800326e:	e010      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <UART_SetConfig+0x56c>)
 8003272:	61fb      	str	r3, [r7, #28]
        break;
 8003274:	e00d      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe febd 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 800327a:	61f8      	str	r0, [r7, #28]
        break;
 800327c:	e009      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e005      	b.n	8003292 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003290:	bf00      	nop
    }

    if (pclk != 0U)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	085a      	lsrs	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d909      	bls.n	80032c6 <UART_SetConfig+0x546>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d205      	bcs.n	80032c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e002      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40008000 	.word	0x40008000
 80032ec:	00f42400 	.word	0x00f42400

080032f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01a      	beq.n	8003406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ee:	d10a      	bne.n	8003406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b098      	sub	sp, #96	@ 0x60
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003444:	f7fd fd22 	bl	8000e8c <HAL_GetTick>
 8003448:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d12e      	bne.n	80034b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f88c 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d021      	beq.n	80034b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
 8003492:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800349e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e062      	b.n	800357c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d149      	bne.n	8003558 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f856 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03c      	beq.n	8003558 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	623b      	str	r3, [r7, #32]
   return(result);
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003530:	61fa      	str	r2, [r7, #28]
 8003532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	617b      	str	r3, [r7, #20]
   return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e011      	b.n	800357c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3758      	adds	r7, #88	@ 0x58
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	e04f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d04b      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fd fc75 	bl	8000e8c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e04e      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d037      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d034      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	d031      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d110      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f838 	bl	800365e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2208      	movs	r2, #8
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e029      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003610:	d111      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800361a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f81e 	bl	800365e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0a0      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365e:	b480      	push	{r7}
 8003660:	b095      	sub	sp, #84	@ 0x54
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800367a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003684:	643b      	str	r3, [r7, #64]	@ 0x40
 8003686:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800368a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e6      	bne.n	8003666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d118      	bne.n	8003706 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e6      	bne.n	80036d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800371a:	bf00      	nop
 800371c:	3754      	adds	r7, #84	@ 0x54
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <memset>:
 8003726:	4402      	add	r2, r0
 8003728:	4603      	mov	r3, r0
 800372a:	4293      	cmp	r3, r2
 800372c:	d100      	bne.n	8003730 <memset+0xa>
 800372e:	4770      	bx	lr
 8003730:	f803 1b01 	strb.w	r1, [r3], #1
 8003734:	e7f9      	b.n	800372a <memset+0x4>
	...

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4d0d      	ldr	r5, [pc, #52]	@ (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	@ (8003774 <__libc_init_array+0x3c>)
 800373e:	1b64      	subs	r4, r4, r5
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2600      	movs	r6, #0
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4d0b      	ldr	r5, [pc, #44]	@ (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <__libc_init_array+0x44>)
 800374c:	f000 f818 	bl	8003780 <_init>
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2600      	movs	r6, #0
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080037e8 	.word	0x080037e8
 8003774:	080037e8 	.word	0x080037e8
 8003778:	080037e8 	.word	0x080037e8
 800377c:	080037ec 	.word	0x080037ec

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
