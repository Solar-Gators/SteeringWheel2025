
SteeringWheel2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c8  080037c8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d0  080037d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d4  080037d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080037e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080037e4  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8fe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b9  00000000  00000000  0000f93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  000110f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ee  00000000  00000000  00011a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273d5  00000000  00000000  000120ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab73  00000000  00000000  000394c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f240d  00000000  00000000  00044036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000242c  00000000  00000000  00136488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001388b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003768 	.word	0x08003768

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003768 	.word	0x08003768

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  for(int i = 0; i<8; i++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e007      	b.n	80004f8 <main+0x1c>
	  lastButtonPressTime[i] = 0;
 80004e8:	4a25      	ldr	r2, [pc, #148]	@ (8000580 <main+0xa4>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i<8; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	ddf4      	ble.n	80004e8 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fc50 	bl	8000da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f847 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8eb 	bl	80006e0 <MX_GPIO_Init>
  MX_UART4_Init();
 800050a:	f000 f889 	bl	8000620 <MX_UART4_Init>
  MX_UART5_Init();
 800050e:	f000 f8b7 	bl	8000680 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  buttonStates = 0;
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <main+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 8000518:	2110      	movs	r1, #16
 800051a:	481b      	ldr	r0, [pc, #108]	@ (8000588 <main+0xac>)
 800051c:	f000 ffae 	bl	800147c <HAL_GPIO_TogglePin>

	if(!HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin)){
 8000520:	2120      	movs	r1, #32
 8000522:	481a      	ldr	r0, [pc, #104]	@ (800058c <main+0xb0>)
 8000524:	f000 ff7a 	bl	800141c <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d107      	bne.n	800053e <main+0x62>
		buttonStates |= 0b00100000;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <main+0xa8>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <main+0xa8>)
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e006      	b.n	800054c <main+0x70>
	}else{
		buttonStates &= 0b11011111;
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <main+0xa8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f023 0320 	bic.w	r3, r3, #32
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <main+0xa8>)
 800054a:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Transmit(&huart4, &buttonStates, 1, 1000) != HAL_OK){
 800054c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000550:	2201      	movs	r2, #1
 8000552:	490c      	ldr	r1, [pc, #48]	@ (8000584 <main+0xa8>)
 8000554:	480e      	ldr	r0, [pc, #56]	@ (8000590 <main+0xb4>)
 8000556:	f002 fb7d 	bl	8002c54 <HAL_UART_Transmit>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <main+0x90>
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0xac>)
 8000566:	f000 ff71 	bl	800144c <HAL_GPIO_WritePin>
 800056a:	e004      	b.n	8000576 <main+0x9a>
	}
	else{
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0xac>)
 8000572:	f000 ff6b 	bl	800144c <HAL_GPIO_WritePin>
	}

	HAL_Delay(500);
 8000576:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057a:	f000 fc87 	bl	8000e8c <HAL_Delay>
	HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 800057e:	e7cb      	b.n	8000518 <main+0x3c>
 8000580:	20000138 	.word	0x20000138
 8000584:	20000158 	.word	0x20000158
 8000588:	48000400 	.word	0x48000400
 800058c:	48000800 	.word	0x48000800
 8000590:	20000028 	.word	0x20000028

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	@ 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	@ 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f8b3 	bl	800370e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ba:	f000 ff9f 	bl	80014fc <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 fa6e 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c8:	2310      	movs	r3, #16
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ffe1 	bl	80015a8 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fa5a 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fbe7 	bl	8001ddc <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000614:	f000 fa46 	bl	8000aa4 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	@ 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_UART4_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	@ (800067c <MX_UART4_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_UART4_Init+0x58>)
 800062c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_UART4_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_UART4_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_UART4_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_UART4_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <MX_UART4_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_UART4_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_UART4_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_UART4_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_UART4_Init+0x58>)
 8000664:	f002 faa8 	bl	8002bb8 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 fa19 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	40004c00 	.word	0x40004c00

08000680 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_UART5_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <MX_UART5_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_UART5_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_UART5_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_UART5_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_UART5_Init+0x58>)
 80006c4:	f002 fa78 	bl	8002bb8 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f9e9 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000b0 	.word	0x200000b0
 80006dc:	40005000 	.word	0x40005000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a5f      	ldr	r2, [pc, #380]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b5d      	ldr	r3, [pc, #372]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b5a      	ldr	r3, [pc, #360]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a59      	ldr	r2, [pc, #356]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <MX_GPIO_Init+0x198>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a53      	ldr	r2, [pc, #332]	@ (8000878 <MX_GPIO_Init+0x198>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a4d      	ldr	r2, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x198>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON8_LED_GPIO_Port, BUTTON8_LED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f000 fe75 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8000768:	4844      	ldr	r0, [pc, #272]	@ (800087c <MX_GPIO_Init+0x19c>)
 800076a:	f000 fe6f 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 800076e:	2200      	movs	r2, #0
 8000770:	f24a 0135 	movw	r1, #41013	@ 0xa035
 8000774:	4842      	ldr	r0, [pc, #264]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000776:	f000 fe69 	bl	800144c <HAL_GPIO_WritePin>
                          |OK_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON8_Pin BUTTON7_Pin */
  GPIO_InitStruct.Pin = BUTTON8_Pin|BUTTON7_Pin;
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fcb1 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON8_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON8_LED_Pin;
 8000796:	2340      	movs	r3, #64	@ 0x40
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON8_LED_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b0:	f000 fca2 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON7_LED_Pin BUTTON3_LED_Pin BUTTON4_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON7_LED_Pin|BUTTON3_LED_Pin|BUTTON4_LED_Pin;
 80007b4:	f44f 7324 	mov.w	r3, #656	@ 0x290
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007ce:	f000 fc93 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON6_Pin;
 80007d2:	2320      	movs	r3, #32
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON6_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4825      	ldr	r0, [pc, #148]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007e6:	f000 fc87 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON6_LED_Pin BUTTON5_LED_Pin BUTTON1_LED_Pin BUTTON2_LED_Pin
                           OK_LED_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = BUTTON6_LED_Pin|BUTTON5_LED_Pin|BUTTON1_LED_Pin|BUTTON2_LED_Pin
 80007ea:	f24a 0335 	movw	r3, #41013	@ 0xa035
 80007ee:	617b      	str	r3, [r7, #20]
                          |OK_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	481f      	ldr	r0, [pc, #124]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000804:	f000 fc78 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON5_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000808:	f245 0302 	movw	r3, #20482	@ 0x5002
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4818      	ldr	r0, [pc, #96]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000820:	f000 fc6a 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON4_Pin;
 8000824:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4810      	ldr	r0, [pc, #64]	@ (800087c <MX_GPIO_Init+0x19c>)
 800083c:	f000 fc5c 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2007      	movs	r0, #7
 8000846:	f000 fc20 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800084a:	2007      	movs	r0, #7
 800084c:	f000 fc39 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2017      	movs	r0, #23
 8000856:	f000 fc18 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800085a:	2017      	movs	r0, #23
 800085c:	f000 fc31 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2028      	movs	r0, #40	@ 0x28
 8000866:	f000 fc10 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086a:	2028      	movs	r0, #40	@ 0x28
 800086c:	f000 fc29 	bl	80010c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	@ 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800
 8000880:	48000400 	.word	0x48000400

08000884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime;

	if (GPIO_Pin == BUTTON1_Pin) {
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000894:	d11a      	bne.n	80008cc <HAL_GPIO_EXTI_Callback+0x48>
		currentTime = HAL_GetTick();
 8000896:	f000 faed 	bl	8000e74 <HAL_GetTick>
 800089a:	60f8      	str	r0, [r7, #12]

	    if ((currentTime - lastButtonPressTime[0]) > DEBOUNCE_THRESHOLD) {
 800089c:	4b7d      	ldr	r3, [pc, #500]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b32      	cmp	r3, #50	@ 0x32
 80008a6:	d911      	bls.n	80008cc <HAL_GPIO_EXTI_Callback+0x48>
	    	lastButtonPressTime[0] = currentTime;  // Update last press time
 80008a8:	4a7a      	ldr	r2, [pc, #488]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6013      	str	r3, [r2, #0]

	        if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET) {
 80008ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b2:	4879      	ldr	r0, [pc, #484]	@ (8000a98 <HAL_GPIO_EXTI_Callback+0x214>)
 80008b4:	f000 fdb2 	bl	800141c <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <HAL_GPIO_EXTI_Callback+0x48>
	                buttonStates ^= 0b00000001;
 80008be:	4b77      	ldr	r3, [pc, #476]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f083 0301 	eor.w	r3, r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b74      	ldr	r3, [pc, #464]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80008ca:	701a      	strb	r2, [r3, #0]

	        }
	    }
	}
	if (GPIO_Pin == BUTTON2_Pin) {
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008d2:	d11a      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x86>
		currentTime = HAL_GetTick();
 80008d4:	f000 face 	bl	8000e74 <HAL_GetTick>
 80008d8:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[1]) > DEBOUNCE_THRESHOLD) {
 80008da:	4b6e      	ldr	r3, [pc, #440]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2b32      	cmp	r3, #50	@ 0x32
 80008e4:	d911      	bls.n	800090a <HAL_GPIO_EXTI_Callback+0x86>
			lastButtonPressTime[1] = currentTime;  // Update last press time
 80008e6:	4a6b      	ldr	r2, [pc, #428]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6053      	str	r3, [r2, #4]

		    if (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET) {
 80008ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f0:	4869      	ldr	r0, [pc, #420]	@ (8000a98 <HAL_GPIO_EXTI_Callback+0x214>)
 80008f2:	f000 fd93 	bl	800141c <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x86>
		    	buttonStates ^= 0b00000010;
 80008fc:	4b67      	ldr	r3, [pc, #412]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f083 0302 	eor.w	r3, r3, #2
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b65      	ldr	r3, [pc, #404]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000908:	701a      	strb	r2, [r3, #0]

		    }
		}
	}

	if (GPIO_Pin == BUTTON3_Pin) { // hazards
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b40      	cmp	r3, #64	@ 0x40
 800090e:	d127      	bne.n	8000960 <HAL_GPIO_EXTI_Callback+0xdc>
		currentTime = HAL_GetTick();
 8000910:	f000 fab0 	bl	8000e74 <HAL_GetTick>
 8000914:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[2]) > DEBOUNCE_THRESHOLD) {
 8000916:	4b5f      	ldr	r3, [pc, #380]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b32      	cmp	r3, #50	@ 0x32
 8000920:	d91e      	bls.n	8000960 <HAL_GPIO_EXTI_Callback+0xdc>
			lastButtonPressTime[2] = currentTime;  // Update last press time
 8000922:	4a5c      	ldr	r2, [pc, #368]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6093      	str	r3, [r2, #8]

			if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_RESET) {
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	485d      	ldr	r0, [pc, #372]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x21c>)
 800092c:	f000 fd76 	bl	800141c <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d114      	bne.n	8000960 <HAL_GPIO_EXTI_Callback+0xdc>
				buttonStates ^= 0b00000100;
 8000936:	4b59      	ldr	r3, [pc, #356]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f083 0304 	eor.w	r3, r3, #4
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b56      	ldr	r3, [pc, #344]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000942:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11110111; // turn off left turn
 8000944:	4b55      	ldr	r3, [pc, #340]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	f023 0308 	bic.w	r3, r3, #8
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b53      	ldr	r3, [pc, #332]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000950:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b01111111; // turn off right turn
 8000952:	4b52      	ldr	r3, [pc, #328]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 800095e:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (GPIO_Pin == BUTTON4_Pin) { // left turn
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000966:	d128      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x136>
		currentTime = HAL_GetTick();
 8000968:	f000 fa84 	bl	8000e74 <HAL_GetTick>
 800096c:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[3]) > DEBOUNCE_THRESHOLD) {
 800096e:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b32      	cmp	r3, #50	@ 0x32
 8000978:	d91f      	bls.n	80009ba <HAL_GPIO_EXTI_Callback+0x136>
			lastButtonPressTime[3] = currentTime;  // Update last press time
 800097a:	4a46      	ldr	r2, [pc, #280]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	60d3      	str	r3, [r2, #12]

			if (HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) == GPIO_PIN_RESET) {
 8000980:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000984:	4846      	ldr	r0, [pc, #280]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000986:	f000 fd49 	bl	800141c <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d114      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x136>
				buttonStates ^= 0b00001000;
 8000990:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	f083 0308 	eor.w	r3, r3, #8
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b40      	ldr	r3, [pc, #256]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 800099c:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b01111111; // turn off right turn
 800099e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009aa:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 80009ac:	4b3b      	ldr	r3, [pc, #236]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f023 0304 	bic.w	r3, r3, #4
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009b8:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	if (GPIO_Pin == BUTTON5_Pin) {
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d119      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x170>
		currentTime = HAL_GetTick();
 80009c0:	f000 fa58 	bl	8000e74 <HAL_GetTick>
 80009c4:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[4]) > DEBOUNCE_THRESHOLD) {
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b32      	cmp	r3, #50	@ 0x32
 80009d0:	d910      	bls.n	80009f4 <HAL_GPIO_EXTI_Callback+0x170>
			lastButtonPressTime[4] = currentTime;  // Update last press time
 80009d2:	4a30      	ldr	r2, [pc, #192]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6113      	str	r3, [r2, #16]

			if (HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin) == GPIO_PIN_RESET) {
 80009d8:	2102      	movs	r1, #2
 80009da:	482f      	ldr	r0, [pc, #188]	@ (8000a98 <HAL_GPIO_EXTI_Callback+0x214>)
 80009dc:	f000 fd1e 	bl	800141c <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d106      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x170>
				buttonStates ^= 0b00010000;
 80009e6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	f083 0310 	eor.w	r3, r3, #16
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 80009f2:	701a      	strb	r2, [r3, #0]
		}
	}



	if (GPIO_Pin == BUTTON7_Pin) {
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	2b80      	cmp	r3, #128	@ 0x80
 80009f8:	d11a      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0x1ac>
		currentTime = HAL_GetTick();
 80009fa:	f000 fa3b 	bl	8000e74 <HAL_GetTick>
 80009fe:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[6]) > DEBOUNCE_THRESHOLD) {
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b32      	cmp	r3, #50	@ 0x32
 8000a0a:	d911      	bls.n	8000a30 <HAL_GPIO_EXTI_Callback+0x1ac>
			lastButtonPressTime[6] = currentTime;  // Update last press time
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6193      	str	r3, [r2, #24]

			if (HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin) == GPIO_PIN_RESET) {
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a18:	f000 fd00 	bl	800141c <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0x1ac>
				buttonStates ^= 0b01000000;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a2e:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	if (GPIO_Pin == BUTTON8_Pin) { // right turn
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	2b20      	cmp	r3, #32
 8000a34:	d129      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x206>
		currentTime = HAL_GetTick();
 8000a36:	f000 fa1d 	bl	8000e74 <HAL_GetTick>
 8000a3a:	60f8      	str	r0, [r7, #12]

		if ((currentTime - lastButtonPressTime[7]) > DEBOUNCE_THRESHOLD) {
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	2b32      	cmp	r3, #50	@ 0x32
 8000a46:	d920      	bls.n	8000a8a <HAL_GPIO_EXTI_Callback+0x206>
			lastButtonPressTime[7] = currentTime;  // Update last press time
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x210>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	61d3      	str	r3, [r2, #28]

			if (HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin) == GPIO_PIN_RESET) {
 8000a4e:	2120      	movs	r1, #32
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a54:	f000 fce2 	bl	800141c <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d115      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x206>
				buttonStates ^= 0b10000000;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000a66:	43db      	mvns	r3, r3
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a6c:	701a      	strb	r2, [r3, #0]
				buttonStates &= 0b11110111; // turn of left turn
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f023 0308 	bic.w	r3, r3, #8
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a7a:	701a      	strb	r2, [r3, #0]
        buttonStates &= 0b11111011; // turn off hazards
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f023 0304 	bic.w	r3, r3, #4
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x218>)
 8000a88:	701a      	strb	r2, [r3, #0]





}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000138 	.word	0x20000138
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	20000158 	.word	0x20000158
 8000aa0:	48000800 	.word	0x48000800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0b0      	sub	sp, #192	@ 0xc0
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	228c      	movs	r2, #140	@ 0x8c
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fdf8 	bl	800370e <memset>
  if(huart->Instance==UART4)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a53      	ldr	r2, [pc, #332]	@ (8000c70 <HAL_UART_MspInit+0x178>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d13c      	bne.n	8000ba2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fb75 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f7ff ffb0 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b44:	4b4b      	ldr	r3, [pc, #300]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b48:	4a4a      	ldr	r2, [pc, #296]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b50:	4b48      	ldr	r3, [pc, #288]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b45      	ldr	r3, [pc, #276]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	4a44      	ldr	r2, [pc, #272]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b68:	4b42      	ldr	r3, [pc, #264]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4837      	ldr	r0, [pc, #220]	@ (8000c78 <HAL_UART_MspInit+0x180>)
 8000b9c:	f000 faac 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000ba0:	e061      	b.n	8000c66 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==UART5)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a35      	ldr	r2, [pc, #212]	@ (8000c7c <HAL_UART_MspInit+0x184>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d15c      	bne.n	8000c66 <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000bac:	2310      	movs	r3, #16
 8000bae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fb33 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000bc4:	f7ff ff6e 	bl	8000aa4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bcc:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be4:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_UART_MspInit+0x17c>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <HAL_UART_MspInit+0x180>)
 8000c38:	f000 fa5e 	bl	80010f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c54:	2308      	movs	r3, #8
 8000c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <HAL_UART_MspInit+0x188>)
 8000c62:	f000 fa49 	bl	80010f8 <HAL_GPIO_Init>
}
 8000c66:	bf00      	nop
 8000c68:	37c0      	adds	r7, #192	@ 0xc0
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004c00 	.word	0x40004c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	40005000 	.word	0x40005000
 8000c80:	48000c00 	.word	0x48000c00

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f8b7 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 fbe2 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_Pin);
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	f000 fbdb 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON8_LED_Pin);
 8000cfa:	2040      	movs	r0, #64	@ 0x40
 8000cfc:	f000 fbd8 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON7_Pin);
 8000d00:	2080      	movs	r0, #128	@ 0x80
 8000d02:	f000 fbd5 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8000d06:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d0a:	f000 fbd1 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8000d16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d1a:	f000 fbc9 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8000d1e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d22:	f000 fbc5 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d54:	f7ff ffea 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	@ (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f002 fccf 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d82:	f7ff fbab 	bl	80004dc <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d94:	080037d8 	.word	0x080037d8
  ldr r2, =_sbss
 8000d98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d9c:	20000160 	.word	0x20000160

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>

08000da2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f961 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f80e 	bl	8000dd4 <HAL_InitTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	e001      	b.n	8000dc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc4:	f7ff fe74 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <HAL_InitTick+0x6c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d023      	beq.n	8000e30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <HAL_InitTick+0x70>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_InitTick+0x6c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f96d 	bl	80010de <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10f      	bne.n	8000e2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d809      	bhi.n	8000e24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f937 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <HAL_InitTick+0x74>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e007      	b.n	8000e34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e004      	b.n	8000e34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e001      	b.n	8000e34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	2000015c 	.word	0x2000015c

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2000015c 	.word	0x2000015c

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e166      	b.n	80013d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8158 	beq.w	80013d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d017      	beq.n	80011d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	6939      	ldr	r1, [r7, #16]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80b2 	beq.w	80013d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b61      	ldr	r3, [pc, #388]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001270:	4a60      	ldr	r2, [pc, #384]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6613      	str	r3, [r2, #96]	@ 0x60
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001284:	4a5c      	ldr	r2, [pc, #368]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ae:	d02b      	beq.n	8001308 <HAL_GPIO_Init+0x210>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d025      	beq.n	8001304 <HAL_GPIO_Init+0x20c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <HAL_GPIO_Init+0x308>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d01f      	beq.n	8001300 <HAL_GPIO_Init+0x208>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d019      	beq.n	80012fc <HAL_GPIO_Init+0x204>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001408 <HAL_GPIO_Init+0x310>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <HAL_GPIO_Init+0x200>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4e      	ldr	r2, [pc, #312]	@ (800140c <HAL_GPIO_Init+0x314>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1fc>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <HAL_GPIO_Init+0x318>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x31c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1f4>
 80012e8:	2307      	movs	r3, #7
 80012ea:	e00e      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012ec:	2308      	movs	r3, #8
 80012ee:	e00c      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f0:	2306      	movs	r3, #6
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131a:	4937      	ldr	r1, [pc, #220]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_GPIO_Init+0x320>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134c:	4a32      	ldr	r2, [pc, #200]	@ (8001418 <HAL_GPIO_Init+0x320>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001352:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <HAL_GPIO_Init+0x320>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <HAL_GPIO_Init+0x320>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_GPIO_Init+0x320>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_GPIO_Init+0x320>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <HAL_GPIO_Init+0x320>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <HAL_GPIO_Init+0x320>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f ae91 	bne.w	8001108 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	48001800 	.word	0x48001800
 8001414:	48001c00 	.word	0x48001c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e001      	b.n	800143e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43d9      	mvns	r1, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	400b      	ands	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f9d8 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800150a:	d130      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001518:	d038      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001522:	4a1e      	ldr	r2, [pc, #120]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2232      	movs	r2, #50	@ 0x32
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	e002      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001554:	d102      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f2      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001568:	d110      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e00f      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157a:	d007      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 bc08 	b.w	8001dcc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4b96      	ldr	r3, [pc, #600]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4b94      	ldr	r3, [pc, #592]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80e4 	beq.w	80017a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f040 808b 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 8087 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	4b88      	ldr	r3, [pc, #544]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x64>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e3df      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4b81      	ldr	r3, [pc, #516]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_RCC_OscConfig+0x7e>
 800161c:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001624:	e005      	b.n	8001632 <HAL_RCC_OscConfig+0x8a>
 8001626:	4b7c      	ldr	r3, [pc, #496]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001632:	4293      	cmp	r3, r2
 8001634:	d223      	bcs.n	800167e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd92 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3c0      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164a:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a72      	ldr	r2, [pc, #456]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	496d      	ldr	r1, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	4968      	ldr	r1, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e025      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a65      	ldr	r2, [pc, #404]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4960      	ldr	r1, [pc, #384]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	4b5e      	ldr	r3, [pc, #376]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	495b      	ldr	r1, [pc, #364]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd52 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e380      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ca:	f000 fc87 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4950      	ldr	r1, [pc, #320]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001820 <HAL_RCC_OscConfig+0x278>)
 80016e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb70 	bl	8000dd4 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d052      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	e364      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d032      	beq.n	8001770 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a42      	ldr	r2, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001716:	f7ff fbad 	bl	8000e74 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171e:	f7ff fba9 	bl	8000e74 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e34d      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a35      	ldr	r2, [pc, #212]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4930      	ldr	r1, [pc, #192]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	492b      	ldr	r1, [pc, #172]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb7a 	bl	8000e74 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff fb76 	bl	8000e74 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e31a      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1dc>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d073      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x21c>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d10e      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d063      	beq.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15f      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2f7      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x24c>
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_OscConfig+0x280>
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a02      	ldr	r2, [pc, #8]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 8001818:	40021000 	.word	0x40021000
 800181c:	08003780 	.word	0x08003780
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004
 8001828:	4ba0      	ldr	r3, [pc, #640]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a9f      	ldr	r2, [pc, #636]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b9d      	ldr	r3, [pc, #628]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a9c      	ldr	r2, [pc, #624]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fb14 	bl	8000e74 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb10 	bl	8000e74 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2b4      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a8>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb00 	bl	8000e74 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fafc 	bl	8000e74 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a0      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4b88      	ldr	r3, [pc, #544]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x310>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b7c      	ldr	r3, [pc, #496]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e27d      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b76      	ldr	r3, [pc, #472]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4973      	ldr	r1, [pc, #460]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	e040      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fabb 	bl	8000e74 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fab7 	bl	8000e74 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e25b      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b62      	ldr	r3, [pc, #392]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	495f      	ldr	r1, [pc, #380]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fa97 	bl	8000e74 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fa93 	bl	8000e74 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e237      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001982:	4a4a      	ldr	r2, [pc, #296]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fa72 	bl	8000e74 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fa6e 	bl	8000e74 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e212      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019bc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa55 	bl	8000e74 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fa51 	bl	8000e74 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1f5      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a6 	beq.w	8001b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fa18 	bl	8000e74 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff fa14 	bl	8000e74 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1b8      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7e:	e029      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d115      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x50c>
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9e:	4a03      	ldr	r2, [pc, #12]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aba:	4a9c      	ldr	r2, [pc, #624]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac4:	4b99      	ldr	r3, [pc, #612]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aca:	4a98      	ldr	r2, [pc, #608]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f9ca 	bl	8000e74 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f9c6 	bl	8000e74 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e168      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	4b8c      	ldr	r3, [pc, #560]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f9b3 	bl	8000e74 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff f9af 	bl	8000e74 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e151      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b80      	ldr	r3, [pc, #512]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ed      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	4a7a      	ldr	r2, [pc, #488]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b5c:	4b73      	ldr	r3, [pc, #460]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b62:	4a72      	ldr	r2, [pc, #456]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f982 	bl	8000e74 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7ff f97e 	bl	8000e74 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e122      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	4b69      	ldr	r3, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5cc>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b96:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b9c:	4a63      	ldr	r2, [pc, #396]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f965 	bl	8000e74 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7ff f961 	bl	8000e74 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e105      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80f9 	beq.w	8001dca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	f040 80cf 	bne.w	8001d80 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be2:	4b52      	ldr	r3, [pc, #328]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0203 	and.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d12c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	3b01      	subs	r3, #1
 8001c02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d123      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d071      	beq.n	8001d34 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d068      	beq.n	8001d28 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c56:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c62:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0ac      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2d      	ldr	r2, [pc, #180]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7e:	f7ff f8f9 	bl	8000e74 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f8f5 	bl	8000e74 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e099      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_RCC_OscConfig+0x788>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cbe:	0212      	lsls	r2, r2, #8
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cc6:	0852      	lsrs	r2, r2, #1
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0552      	lsls	r2, r2, #21
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cd2:	0852      	lsrs	r2, r2, #1
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	0652      	lsls	r2, r2, #25
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cde:	06d2      	lsls	r2, r2, #27
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4912      	ldr	r1, [pc, #72]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d00:	f7ff f8b8 	bl	8000e74 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff f8b4 	bl	8000e74 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e058      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d26:	e050      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e04f      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d144      	bne.n	8001dca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d40:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d58:	f7ff f88c 	bl	8000e74 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f888 	bl	8000e74 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e02c      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x7b8>
 8001d7e:	e024      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d01f      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff f86f 	bl	8000e74 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f86b 	bl	8000e74 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4905      	ldr	r1, [pc, #20]	@ (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_RCC_OscConfig+0x830>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e001      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	feeefffc 	.word	0xfeeefffc

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0e7      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b75      	ldr	r3, [pc, #468]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4970      	ldr	r1, [pc, #448]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0cf      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b66      	ldr	r3, [pc, #408]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b63      	ldr	r3, [pc, #396]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4960      	ldr	r1, [pc, #384]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d04c      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b5a      	ldr	r3, [pc, #360]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0a6      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	4b54      	ldr	r3, [pc, #336]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e09a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e92:	4b4e      	ldr	r3, [pc, #312]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e08e      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e086      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4943      	ldr	r1, [pc, #268]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec4:	f7fe ffd6 	bl	8000e74 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe ffd2 	bl	8000e74 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e06e      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d208      	bcs.n	8001f22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	492b      	ldr	r1, [pc, #172]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f22:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d210      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	4923      	ldr	r1, [pc, #140]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e036      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4918      	ldr	r1, [pc, #96]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f90:	f000 f824 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	490b      	ldr	r1, [pc, #44]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ff0d 	bl	8000dd4 <HAL_InitTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08003780 	.word	0x08003780
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fea:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x34>
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d121      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11e      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e005      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002038:	4a2b      	ldr	r2, [pc, #172]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d102      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	e004      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d101      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002060:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002062:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d134      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0xa6>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d003      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0xac>
 8002080:	e005      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002084:	617b      	str	r3, [r7, #20]
      break;
 8002086:	e005      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800208a:	617b      	str	r3, [r7, #20]
      break;
 800208c:	e002      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	617b      	str	r3, [r7, #20]
      break;
 8002092:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	3301      	adds	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	0e5b      	lsrs	r3, r3, #25
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	3301      	adds	r3, #1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020d4:	69bb      	ldr	r3, [r7, #24]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08003798 	.word	0x08003798
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200

080020f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <HAL_RCC_GetHCLKFreq+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002110:	f7ff fff0 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4904      	ldr	r1, [pc, #16]	@ (8002134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	08003790 	.word	0x08003790

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800213c:	f7ff ffda 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0adb      	lsrs	r3, r3, #11
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4904      	ldr	r1, [pc, #16]	@ (8002160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	08003790 	.word	0x08003790

08002164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800217c:	f7ff f9b0 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 8002180:	6178      	str	r0, [r7, #20]
 8002182:	e014      	b.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	4a24      	ldr	r2, [pc, #144]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002190:	4b22      	ldr	r3, [pc, #136]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff f9a0 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b4:	d10b      	bne.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b80      	cmp	r3, #128	@ 0x80
 80021ba:	d919      	bls.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2ba0      	cmp	r3, #160	@ 0xa0
 80021c0:	d902      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e013      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e010      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b80      	cmp	r3, #128	@ 0x80
 80021d2:	d902      	bls.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021d4:	2303      	movs	r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e00a      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b80      	cmp	r3, #128	@ 0x80
 80021de:	d102      	bne.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e004      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b70      	cmp	r3, #112	@ 0x70
 80021ea:	d101      	bne.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ec:	2301      	movs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	4909      	ldr	r1, [pc, #36]	@ (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800222c:	2300      	movs	r3, #0
 800222e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002230:	2300      	movs	r3, #0
 8002232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d041      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002244:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002248:	d02a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800224a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800224e:	d824      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002256:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800225a:	d81e      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002264:	d010      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002266:	e018      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a85      	ldr	r2, [pc, #532]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002274:	e015      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f000 facd 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002286:	e00c      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3320      	adds	r3, #32
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fbb6 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002298:	e003      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	74fb      	strb	r3, [r7, #19]
      break;
 800229e:	e000      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a8:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022b6:	4973      	ldr	r1, [pc, #460]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022be:	e001      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d041      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022d8:	d02a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022de:	d824      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022ea:	d81e      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f4:	d010      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022f6:	e018      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f8:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a61      	ldr	r2, [pc, #388]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002302:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002304:	e015      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fa85 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3320      	adds	r3, #32
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fb6e 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002328:	e003      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	74fb      	strb	r3, [r7, #19]
      break;
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002338:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002346:	494f      	ldr	r1, [pc, #316]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800234e:	e001      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a0 	beq.w	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	@ 0x58
 8002388:	4b3e      	ldr	r3, [pc, #248]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fd66 	bl	8000e74 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023aa:	e009      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fd62 	bl	8000e74 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d902      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	74fb      	strb	r3, [r7, #19]
        break;
 80023be:	e005      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15c      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d019      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023f0:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002402:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	4a1c      	ldr	r2, [pc, #112]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fd21 	bl	8000e74 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	e00b      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fd1d 	bl	8000e74 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d902      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	74fb      	strb	r3, [r7, #19]
            break;
 800244c:	e006      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ec      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	4904      	ldr	r1, [pc, #16]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800247a:	e009      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
 8002480:	e006      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002490:	7c7b      	ldrb	r3, [r7, #17]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002496:	4ba6      	ldr	r3, [pc, #664]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	4aa5      	ldr	r2, [pc, #660]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b4:	f023 0203 	bic.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	499c      	ldr	r1, [pc, #624]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d0:	4b97      	ldr	r3, [pc, #604]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 020c 	bic.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024de:	4994      	ldr	r1, [pc, #592]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	498b      	ldr	r1, [pc, #556]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002514:	4b86      	ldr	r3, [pc, #536]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4983      	ldr	r1, [pc, #524]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002536:	4b7e      	ldr	r3, [pc, #504]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002544:	497a      	ldr	r1, [pc, #488]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002558:	4b75      	ldr	r3, [pc, #468]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	4972      	ldr	r1, [pc, #456]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257a:	4b6d      	ldr	r3, [pc, #436]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002588:	4969      	ldr	r1, [pc, #420]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800259c:	4b64      	ldr	r3, [pc, #400]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025aa:	4961      	ldr	r1, [pc, #388]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025be:	4b5c      	ldr	r3, [pc, #368]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025cc:	4958      	ldr	r1, [pc, #352]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025e0:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	4950      	ldr	r1, [pc, #320]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002602:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	4947      	ldr	r1, [pc, #284]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002624:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	493f      	ldr	r1, [pc, #252]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d028      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4936      	ldr	r1, [pc, #216]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002664:	d106      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002666:	4b32      	ldr	r3, [pc, #200]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a31      	ldr	r2, [pc, #196]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002670:	60d3      	str	r3, [r2, #12]
 8002672:	e011      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800267c:	d10c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f8c9 	bl	800281c <RCCEx_PLLSAI1_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d028      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026a4:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	491f      	ldr	r1, [pc, #124]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e011      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026da:	d10c      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f89a 	bl	800281c <RCCEx_PLLSAI1_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800271c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002720:	d108      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002722:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a02      	ldr	r2, [pc, #8]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800272c:	60d3      	str	r3, [r2, #12]
 800272e:	e013      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002730:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f869 	bl	800281c <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02f      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002764:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002772:	4929      	ldr	r1, [pc, #164]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800277e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002782:	d10d      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2102      	movs	r1, #2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f846 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d014      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	74bb      	strb	r3, [r7, #18]
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3320      	adds	r3, #32
 80027ae:	2102      	movs	r1, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f925 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027e0:	490d      	ldr	r1, [pc, #52]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002804:	4904      	ldr	r1, [pc, #16]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800280c:	7cbb      	ldrb	r3, [r7, #18]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282a:	4b74      	ldr	r3, [pc, #464]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d018      	beq.n	8002868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002836:	4b71      	ldr	r3, [pc, #452]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
       ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800284e:	4b6b      	ldr	r3, [pc, #428]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
       ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d047      	beq.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e044      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d018      	beq.n	80028a2 <RCCEx_PLLSAI1_Config+0x86>
 8002870:	2b03      	cmp	r3, #3
 8002872:	d825      	bhi.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002874:	2b01      	cmp	r3, #1
 8002876:	d002      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x62>
 8002878:	2b02      	cmp	r3, #2
 800287a:	d009      	beq.n	8002890 <RCCEx_PLLSAI1_Config+0x74>
 800287c:	e020      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800287e:	4b5f      	ldr	r3, [pc, #380]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11d      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288e:	e01a      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002890:	4b5a      	ldr	r3, [pc, #360]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d116      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a0:	e013      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a2:	4b56      	ldr	r3, [pc, #344]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028be:	e006      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      break;
 80028c4:	e004      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	430b      	orrs	r3, r1
 80028ec:	4943      	ldr	r1, [pc, #268]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d17c      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f8:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002904:	f7fe fab6 	bl	8000e74 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290a:	e009      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800290c:	f7fe fab2 	bl	8000e74 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d902      	bls.n	8002920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	73fb      	strb	r3, [r7, #15]
        break;
 800291e:	e005      	b.n	800292c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ef      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d15f      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d110      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002938:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002940:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	0211      	lsls	r1, r2, #8
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	06d2      	lsls	r2, r2, #27
 8002950:	430a      	orrs	r2, r1
 8002952:	492a      	ldr	r1, [pc, #168]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
 8002958:	e027      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d112      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002960:	4b26      	ldr	r3, [pc, #152]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002968:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6892      	ldr	r2, [r2, #8]
 8002970:	0211      	lsls	r1, r2, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6912      	ldr	r2, [r2, #16]
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	0552      	lsls	r2, r2, #21
 800297c:	430a      	orrs	r2, r1
 800297e:	491f      	ldr	r1, [pc, #124]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
 8002984:	e011      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800298e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6952      	ldr	r2, [r2, #20]
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	0652      	lsls	r2, r2, #25
 80029a2:	430a      	orrs	r2, r1
 80029a4:	4915      	ldr	r1, [pc, #84]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029aa:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fa5d 	bl	8000e74 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029bc:	e009      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029be:	f7fe fa59 	bl	8000e74 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
          break;
 80029d0:	e005      	b.n	80029de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0e:	4b69      	ldr	r3, [pc, #420]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a1a:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10d      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a32:	4b60      	ldr	r3, [pc, #384]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
       ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d047      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e044      	b.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d018      	beq.n	8002a86 <RCCEx_PLLSAI2_Config+0x86>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d825      	bhi.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d002      	beq.n	8002a62 <RCCEx_PLLSAI2_Config+0x62>
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d009      	beq.n	8002a74 <RCCEx_PLLSAI2_Config+0x74>
 8002a60:	e020      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a62:	4b54      	ldr	r3, [pc, #336]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a72:	e01a      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a74:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e013      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a86:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a92:	4b48      	ldr	r3, [pc, #288]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aa2:	e006      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e004      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aba:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	4938      	ldr	r1, [pc, #224]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d166      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002adc:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f9c4 	bl	8000e74 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af0:	f7fe f9c0 	bl	8000e74 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
        break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d149      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002b24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	0211      	lsls	r1, r2, #8
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	06d2      	lsls	r2, r2, #27
 8002b34:	430a      	orrs	r2, r1
 8002b36:	491f      	ldr	r1, [pc, #124]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	614b      	str	r3, [r1, #20]
 8002b3c:	e011      	b.n	8002b62 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	0211      	lsls	r1, r2, #8
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6912      	ldr	r2, [r2, #16]
 8002b54:	0852      	lsrs	r2, r2, #1
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0652      	lsls	r2, r2, #25
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4915      	ldr	r1, [pc, #84]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f981 	bl	8000e74 <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b76:	f7fe f97d 	bl	8000e74 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d902      	bls.n	8002b8a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	73fb      	strb	r3, [r7, #15]
          break;
 8002b88:	e005      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	4903      	ldr	r1, [pc, #12]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd ff8c 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb6a 	bl	80032d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8af 	bl	8002d68 <UART_SetConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e01b      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fbe9 	bl	800341c <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d177      	bne.n	8002d5c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Transmit+0x24>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e070      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2221      	movs	r2, #33	@ 0x21
 8002c88:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f8f3 	bl	8000e74 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca8:	d108      	bne.n	8002cbc <HAL_UART_Transmit+0x68>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc4:	e02f      	b.n	8002d26 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fc4b 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e03b      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e007      	b.n	8002d14 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1c9      	bne.n	8002cc6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	@ 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fc15 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e005      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b08a      	sub	sp, #40	@ 0x28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4ba4      	ldr	r3, [pc, #656]	@ (8003028 <UART_SetConfig+0x2c0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a99      	ldr	r2, [pc, #612]	@ (800302c <UART_SetConfig+0x2c4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a90      	ldr	r2, [pc, #576]	@ (8003030 <UART_SetConfig+0x2c8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d126      	bne.n	8002e40 <UART_SetConfig+0xd8>
 8002df2:	4b90      	ldr	r3, [pc, #576]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d81b      	bhi.n	8002e38 <UART_SetConfig+0xd0>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0xa0>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e31 	.word	0x08002e31
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1e:	e116      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e112      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e10e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e30:	2308      	movs	r3, #8
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e10a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e106      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <UART_SetConfig+0x2d0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d138      	bne.n	8002ebc <UART_SetConfig+0x154>
 8002e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d82d      	bhi.n	8002eb4 <UART_SetConfig+0x14c>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <UART_SetConfig+0xf8>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002eb5 	.word	0x08002eb5
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002eb5 	.word	0x08002eb5
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e0d8      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e0d4      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e0d0      	b.n	800304e <UART_SetConfig+0x2e6>
 8002eac:	2308      	movs	r3, #8
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0cc      	b.n	800304e <UART_SetConfig+0x2e6>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e0c8      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800303c <UART_SetConfig+0x2d4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d125      	bne.n	8002f12 <UART_SetConfig+0x1aa>
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed0:	2b30      	cmp	r3, #48	@ 0x30
 8002ed2:	d016      	beq.n	8002f02 <UART_SetConfig+0x19a>
 8002ed4:	2b30      	cmp	r3, #48	@ 0x30
 8002ed6:	d818      	bhi.n	8002f0a <UART_SetConfig+0x1a2>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d00a      	beq.n	8002ef2 <UART_SetConfig+0x18a>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d814      	bhi.n	8002f0a <UART_SetConfig+0x1a2>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <UART_SetConfig+0x182>
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d008      	beq.n	8002efa <UART_SetConfig+0x192>
 8002ee8:	e00f      	b.n	8002f0a <UART_SetConfig+0x1a2>
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef0:	e0ad      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef8:	e0a9      	b.n	800304e <UART_SetConfig+0x2e6>
 8002efa:	2304      	movs	r3, #4
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f00:	e0a5      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f02:	2308      	movs	r3, #8
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e0a1      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f10:	e09d      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4a      	ldr	r2, [pc, #296]	@ (8003040 <UART_SetConfig+0x2d8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d125      	bne.n	8002f68 <UART_SetConfig+0x200>
 8002f1c:	4b45      	ldr	r3, [pc, #276]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f28:	d016      	beq.n	8002f58 <UART_SetConfig+0x1f0>
 8002f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f2c:	d818      	bhi.n	8002f60 <UART_SetConfig+0x1f8>
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d00a      	beq.n	8002f48 <UART_SetConfig+0x1e0>
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d814      	bhi.n	8002f60 <UART_SetConfig+0x1f8>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x1d8>
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x1e8>
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x1f8>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e082      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4e:	e07e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f56:	e07a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e076      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f66:	e072      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	@ (8003044 <UART_SetConfig+0x2dc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12a      	bne.n	8002fc8 <UART_SetConfig+0x260>
 8002f72:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f80:	d01a      	beq.n	8002fb8 <UART_SetConfig+0x250>
 8002f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f86:	d81b      	bhi.n	8002fc0 <UART_SetConfig+0x258>
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8c:	d00c      	beq.n	8002fa8 <UART_SetConfig+0x240>
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f92:	d815      	bhi.n	8002fc0 <UART_SetConfig+0x258>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <UART_SetConfig+0x238>
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9c:	d008      	beq.n	8002fb0 <UART_SetConfig+0x248>
 8002f9e:	e00f      	b.n	8002fc0 <UART_SetConfig+0x258>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e052      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e04e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e04a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e046      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e042      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	@ (800302c <UART_SetConfig+0x2c4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d13a      	bne.n	8003048 <UART_SetConfig+0x2e0>
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe0:	d01a      	beq.n	8003018 <UART_SetConfig+0x2b0>
 8002fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe6:	d81b      	bhi.n	8003020 <UART_SetConfig+0x2b8>
 8002fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fec:	d00c      	beq.n	8003008 <UART_SetConfig+0x2a0>
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff2:	d815      	bhi.n	8003020 <UART_SetConfig+0x2b8>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <UART_SetConfig+0x298>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffc:	d008      	beq.n	8003010 <UART_SetConfig+0x2a8>
 8002ffe:	e00f      	b.n	8003020 <UART_SetConfig+0x2b8>
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e022      	b.n	800304e <UART_SetConfig+0x2e6>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e01e      	b.n	800304e <UART_SetConfig+0x2e6>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0x2e6>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e016      	b.n	800304e <UART_SetConfig+0x2e6>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e012      	b.n	800304e <UART_SetConfig+0x2e6>
 8003028:	efff69f3 	.word	0xefff69f3
 800302c:	40008000 	.word	0x40008000
 8003030:	40013800 	.word	0x40013800
 8003034:	40021000 	.word	0x40021000
 8003038:	40004400 	.word	0x40004400
 800303c:	40004800 	.word	0x40004800
 8003040:	40004c00 	.word	0x40004c00
 8003044:	40005000 	.word	0x40005000
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a9f      	ldr	r2, [pc, #636]	@ (80032d0 <UART_SetConfig+0x568>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d17a      	bne.n	800314e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800305c:	2b08      	cmp	r3, #8
 800305e:	d824      	bhi.n	80030aa <UART_SetConfig+0x342>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0x300>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030ab 	.word	0x080030ab
 8003070:	08003095 	.word	0x08003095
 8003074:	080030ab 	.word	0x080030ab
 8003078:	0800309b 	.word	0x0800309b
 800307c:	080030ab 	.word	0x080030ab
 8003080:	080030ab 	.word	0x080030ab
 8003084:	080030ab 	.word	0x080030ab
 8003088:	080030a3 	.word	0x080030a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff f83e 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8003090:	61f8      	str	r0, [r7, #28]
        break;
 8003092:	e010      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003094:	4b8f      	ldr	r3, [pc, #572]	@ (80032d4 <UART_SetConfig+0x56c>)
 8003096:	61fb      	str	r3, [r7, #28]
        break;
 8003098:	e00d      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309a:	f7fe ff9f 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 800309e:	61f8      	str	r0, [r7, #28]
        break;
 80030a0:	e009      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030a6:	61fb      	str	r3, [r7, #28]
        break;
 80030a8:	e005      	b.n	80030b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80fb 	beq.w	80032b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d305      	bcc.n	80030da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d903      	bls.n	80030e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030e0:	e0e8      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2200      	movs	r2, #0
 80030e6:	461c      	mov	r4, r3
 80030e8:	4615      	mov	r5, r2
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	022b      	lsls	r3, r5, #8
 80030f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030f8:	0222      	lsls	r2, r4, #8
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	6849      	ldr	r1, [r1, #4]
 80030fe:	0849      	lsrs	r1, r1, #1
 8003100:	2000      	movs	r0, #0
 8003102:	4688      	mov	r8, r1
 8003104:	4681      	mov	r9, r0
 8003106:	eb12 0a08 	adds.w	sl, r2, r8
 800310a:	eb43 0b09 	adc.w	fp, r3, r9
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311c:	4650      	mov	r0, sl
 800311e:	4659      	mov	r1, fp
 8003120:	f7fd f864 	bl	80001ec <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003132:	d308      	bcc.n	8003146 <UART_SetConfig+0x3de>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313a:	d204      	bcs.n	8003146 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e0b6      	b.n	80032b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800314c:	e0b2      	b.n	80032b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003156:	d15e      	bne.n	8003216 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003158:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800315c:	2b08      	cmp	r3, #8
 800315e:	d828      	bhi.n	80031b2 <UART_SetConfig+0x44a>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <UART_SetConfig+0x400>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7fe ffbe 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e014      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7fe ffd0 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8003198:	61f8      	str	r0, [r7, #28]
        break;
 800319a:	e010      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b4d      	ldr	r3, [pc, #308]	@ (80032d4 <UART_SetConfig+0x56c>)
 800319e:	61fb      	str	r3, [r7, #28]
        break;
 80031a0:	e00d      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe ff1b 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80031a6:	61f8      	str	r0, [r7, #28]
        break;
 80031a8:	e009      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e005      	b.n	80031be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d077      	beq.n	80032b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005a      	lsls	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d916      	bls.n	800320e <UART_SetConfig+0x4a6>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e6:	d212      	bcs.n	800320e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	4313      	orrs	r3, r2
 8003202:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	8afa      	ldrh	r2, [r7, #22]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	e052      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003214:	e04e      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003216:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800321a:	2b08      	cmp	r3, #8
 800321c:	d827      	bhi.n	800326e <UART_SetConfig+0x506>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <UART_SetConfig+0x4bc>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	0800326f 	.word	0x0800326f
 8003234:	0800325f 	.word	0x0800325f
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
 8003244:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7fe ff60 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e014      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7fe ff72 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8003254:	61f8      	str	r0, [r7, #28]
        break;
 8003256:	e010      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <UART_SetConfig+0x56c>)
 800325a:	61fb      	str	r3, [r7, #28]
        break;
 800325c:	e00d      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7fe febd 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003262:	61f8      	str	r0, [r7, #28]
        break;
 8003264:	e009      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	61fb      	str	r3, [r7, #28]
        break;
 800326c:	e005      	b.n	800327a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003278:	bf00      	nop
    }

    if (pclk != 0U)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085a      	lsrs	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d909      	bls.n	80032ae <UART_SetConfig+0x546>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d205      	bcs.n	80032ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e002      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	@ 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40008000 	.word	0x40008000
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01a      	beq.n	80033ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d6:	d10a      	bne.n	80033ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b098      	sub	sp, #96	@ 0x60
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd fd22 	bl	8000e74 <HAL_GetTick>
 8003430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d12e      	bne.n	800349e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f88c 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d021      	beq.n	800349e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003478:	647b      	str	r3, [r7, #68]	@ 0x44
 800347a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800347e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e6      	bne.n	800345a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e062      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d149      	bne.n	8003540 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f856 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03c      	beq.n	8003540 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	623b      	str	r3, [r7, #32]
   return(result);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60fb      	str	r3, [r7, #12]
   return(result);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	617b      	str	r3, [r7, #20]
   return(result);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e011      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3758      	adds	r7, #88	@ 0x58
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e04f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d04b      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fd fc75 	bl	8000e74 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e04e      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d037      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b80      	cmp	r3, #128	@ 0x80
 80035b2:	d034      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d031      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d110      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f838 	bl	8003646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2208      	movs	r2, #8
 80035da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e029      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f8:	d111      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f81e 	bl	8003646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0a0      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003646:	b480      	push	{r7}
 8003648:	b095      	sub	sp, #84	@ 0x54
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800366c:	643b      	str	r3, [r7, #64]	@ 0x40
 800366e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e6      	bne.n	800364e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d118      	bne.n	80036ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0310 	bic.w	r3, r3, #16
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e6      	bne.n	80036bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003702:	bf00      	nop
 8003704:	3754      	adds	r7, #84	@ 0x54
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <memset>:
 800370e:	4402      	add	r2, r0
 8003710:	4603      	mov	r3, r0
 8003712:	4293      	cmp	r3, r2
 8003714:	d100      	bne.n	8003718 <memset+0xa>
 8003716:	4770      	bx	lr
 8003718:	f803 1b01 	strb.w	r1, [r3], #1
 800371c:	e7f9      	b.n	8003712 <memset+0x4>
	...

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4d0d      	ldr	r5, [pc, #52]	@ (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2600      	movs	r6, #0
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4d0b      	ldr	r5, [pc, #44]	@ (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	@ (8003764 <__libc_init_array+0x44>)
 8003734:	f000 f818 	bl	8003768 <_init>
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2600      	movs	r6, #0
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037d0 	.word	0x080037d0
 800375c:	080037d0 	.word	0x080037d0
 8003760:	080037d0 	.word	0x080037d0
 8003764:	080037d4 	.word	0x080037d4

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
